# import 
from bs4 import BeautifulSoup as bs
from urllib.parse import urlparse
from urllib.request import urlopen
from urllib.error import URLError, HTTPError
from h11 import Response
import urllib3
import pandas as pd
import requests
import time
import re
import os
import os.path
import sys

cvenumlink=""
allcvelinks=[]
existing_git=[]



# GIT크롤
baselink = "0"
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
#링크 추출 변경 2022.02.20
allcvelinks_list=[]
def allcvelink():
    for i in range(1, 57):
        pagelink = "https://www.cvedetails.com/vulnerability-list.php?vendor_id=33&product_id=&version_id=&page="'%s'"&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=1&trc=2777&sha=2f79d8daa05f3cbce8cd668c2f5513fece73c35b" %i
        html = requests.get(pagelink, verify=False)
        soup = bs(html.text, 'html.parser')
        souplink = soup.select("a[href^='/cve/']")
        for j in range(len(souplink)):
            souplink[j] = str(souplink[j])
            souplink[j] = bs(souplink[j], "lxml").text
            allcvelinks_list.append(souplink[j])
    return(0)

def gitcommit(gitlink_glob):
        gitlist=['gitstat','github']
        if gitlink_glob == "https://":
            return("none git link","","","")
        else:
            try:
                if 'gitstat' in str(gitlink_glob):
                    return("gitstat is unavailable","", "", "")
                elif 'github' in str(gitlink_glob):
                    return("github is unavailable", "", "", "")
                html = requests.get(gitlink_glob, verify=False)
                soup = bs(html.text, 'html.parser')
                souperror = soup.find_all(class_="error")
                if len(souperror) == 0: 
                    soupcmsj = soup.find_all(class_="commit-subject")
                    soupcmsg = soup.find_all(class_="commit-msg")
                    soupbef = soup.select('div.ctx, div.del')
                    soupaft = soup.select('div.ctx, div.add')
                    soupcmsj = str(soupcmsj)
                    soupcmsg = str(soupcmsg)
                    soupcmsj = bs(soupcmsj, "lxml").text
                    soupcmsg = bs(soupcmsg, "lxml").text
                    soupcmsj = soupcmsj.replace("[","").replace("]","").replace("&lt"," ").replace("&gt"," ")
                    soupcmsg = soupcmsg.replace("[","").replace("]","").replace("&lt"," ").replace("&gt"," ")
                    return(soupcmsj, soupcmsg, soupbef, soupaft)
                elif len(souperror) == 1:
                    return("unavailable link exists", "", "", "")
                else:
                    return("none git link", "", "", "")
            except ConnectionError:
                return("broken git link", "", "", "")


# 링크
def gitlink(cvenumlink):
        html = requests.get(cvenumlink)
        soup = bs(html.text,'html.parser')
        cve_references = str(soup.find_all("td", class_="r_average"))
        cve_references = re.sub('<.+?>','',cve_references,0).strip()
        cve_references = cve_references.replace(" ", "").replace("\n", "").replace("\'", "").replace("]", "").replace("[", "")
        git_links = lambda tag: (getattr(tag, 'name', None) == 'a' and
                                   'href' in tag.attrs and
                                   'git' in tag.get_text().lower())          #git link 존재 유무 판별
        results = str(soup.find_all(git_links))
        results = re.sub('<.+?>','',results,0).strip()
        results = results.replace("\n", "").replace("\'", "").replace("]", "").replace("[", "").replace("\"","").replace("git2","git")
        arr = results.split(',')
        a = len(arr)
        if a==2:
            giturl = arr[1]
            return giturl
        else:
            return ("https://")


# cve넘버 파일 작성
def main():
    for plusnum in range(len(allcvelinks_list)):
        try:
            cvenum = allcvelinks_list[plusnum]
            foldercheck = os.path.exists('./cvefolder/'+cvenum)
            if foldercheck == True:
                print("skipped existing "+ cvenum + " file")
                continue
            else:
                try:
                    cvenumlink = "https://www.cvedetails.com/cve/"'%s'%str(cvenum)
                    gitlink_glob = gitlink(cvenumlink)
                    #print(gitlink_glob)
                    commitmsj, commitdet, commitbef, commitaft = gitcommit(gitlink_glob)
                    if str(commitdet) == "":
                        print(cvenum + ' msg : ' + commitmsj)
                        continue
                    else:
                        existing_git.append(cvenum)
                        existing_git.append("\n")
                        os.mkdir('./cvefolder/'+ cvenum)
                        f=open('./cvefolder/'+ cvenum +'/' + cvenum + '.txt', 'w', encoding='utf-8')
                        f.write("CVE Number : " + cvenum)
                        f.write("\n")
                        f.write("Commit Message : " + "\n")
                        f.write(commitmsj)
                        f.write("\n")
                        f.write("Commit Details : " + "\n")
                        f.write(commitdet)
                        f.write("\n")
                        f.write("Before patch : " + "\n")
                        for i in range(len(commitbef)):
                            commitbef_t = str(commitbef[i])
                            commitbef_t = bs(commitbef_t, "lxml").text
                            commitbef_t = commitbef_t.replace("+"," ").replace("-"," ")    
                            f.write(commitbef_t)
                            f.write("\n")
                        f.write("After patch : " + "\n")
                        for i in range(len(commitaft)):
                            commitaft_t = str(commitaft[i])
                            commitaft_t = bs(commitaft_t, "lxml").text
                            commitaft_t = commitaft_t.replace("+"," ").replace("-"," ")  
                            f.write(commitaft_t)
                            f.write("\n")
                        f.close()
                        print(cvenum + " writing")
                except ConnectionError:
                    print( cvenum + "'s link is broken")
        except AttributeError:
            print(cvenum+" does not exist")
        except FileExistsError:
            print("skipped existing "+ cvenum + " file")
        
        


if __name__ == '__main__':
    allcvelink()
    main()
    print("End of Proccess")
    print(existing_git)