CVE Number : CVE-2015-8950
Commit Message : 
arm64: dma-mapping: always clear allocated buffers
Commit Details : 
Buffers allocated by dma_alloc_coherent() are always zeroed on Alpha,
ARM (32bit), MIPS, PowerPC, x86/x86_64 and probably other architectures.
It turned out that some drivers rely on this 'feature'. Allocated buffer
might be also exposed to userspace with dma_mmap() call, so clearing it
is desired from security point of view to avoid exposing random memory
to userspace. This patch unifies dma_alloc_coherent() behavior on ARM64
architecture with other implementations by unconditionally zeroing
allocated buffer.

Cc: <stable@vger.kernel.org> # v3.14+
Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
Signed-off-by: Will Deacon <will.deacon@arm.com>

Before patch : 
 
 		*ret_page = phys_to_page(phys);
 		ptr = (void *)val;
 		if (flags & __GFP_ZERO)
 			memset(ptr, 0, size);
 	}
 
 	return ptr;
 
 		*dma_handle = phys_to_dma(dev, page_to_phys(page));
 		addr = page_address(page);
 		if (flags & __GFP_ZERO)
 			memset(addr, 0, size);
 		return addr;
 	} else {
 		return swiotlb_alloc_coherent(dev, size, dma_handle, flags);
After patch : 
 
 		*ret_page = phys_to_page(phys);
 		ptr = (void *)val;
 		memset(ptr, 0, size);
 	}
 
 	return ptr;
 
 		*dma_handle = phys_to_dma(dev, page_to_phys(page));
 		addr = page_address(page);
 		memset(addr, 0, size);
 		return addr;
 	} else {
 		return swiotlb_alloc_coherent(dev, size, dma_handle, flags);
