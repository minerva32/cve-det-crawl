CVE Number : CVE-2014-2739
Commit Message : 
IB/core: Don't resolve passive side RoCE L2 address in CMA REQ handler
Commit Details : 
The code that resolves the passive side source MAC within the rdma_cm
connection request handler was both redundant and buggy, so remove it.

It was redundant since later, when an RC QP is modified to RTR state,
the resolution will take place in the ib_core module.  It was buggy
because this callback also deals with UD SIDR exchange, for which we
incorrectly looked at the REQ member of the CM event and dereferenced
a random value.

Fixes: dd5f03beb4f7 ("IB/core: Ethernet L2 attributes in verbs/cm structures")
Signed-off-by: Moni Shoua <monis@mellanox.com>
Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
Signed-off-by: Roland Dreier <roland@purestorage.com>

Before patch : 
 			   grh, &av >ah_attr);
 }
 
 int ib_update_cm_av(struct ib_cm_id *id, const u8 *smac, const u8 *alt_smac)
 {
 	struct cm_id_private *cm_id_priv;
 
 	cm_id_priv = container_of(id, struct cm_id_private, id);
 
 	if (smac != NULL)
 		memcpy(cm_id_priv >av.smac, smac, sizeof(cm_id_priv >av.smac));
 
 	if (alt_smac != NULL)
 		memcpy(cm_id_priv >alt_av.smac, alt_smac,
 		       sizeof(cm_id_priv >alt_av.smac));
 
 	return 0;
 }
 EXPORT_SYMBOL(ib_update_cm_av);
 
 static int cm_init_av_by_path(struct ib_sa_path_rec *path, struct cm_av *av)
 {
 	struct cm_device *cm_dev;
 	struct rdma_id_private *listen_id, *conn_id;
 	struct rdma_cm_event event;
 	int offset, ret;
 	u8 smac[ETH_ALEN];
 	u8 alt_smac[ETH_ALEN];
 	u8 *psmac = smac;
 	u8 *palt_smac = alt_smac;
 	int is_iboe = ((rdma_node_get_transport(cm_id >device >node_type) ==
 			RDMA_TRANSPORT_IB) &&
 		       (rdma_port_get_link_layer(cm_id >device,
 			ib_event >param.req_rcvd.port) ==
 			IB_LINK_LAYER_ETHERNET));
 
 	listen_id = cm_id >context;
 	if (!cma_check_req_qp_type(&listen_id >id, ib_event))
 	ret = conn_id >id.event_handler(&conn_id >id, &event);
 	if (ret)
 		goto err3;
 
 	if (is_iboe) {
 		if (ib_event >param.req_rcvd.primary_path != NULL)
 			rdma_addr_find_smac_by_sgid(
 				&ib_event >param.req_rcvd.primary_path >sgid,
 				psmac, NULL);
 		else
 			psmac = NULL;
 		if (ib_event >param.req_rcvd.alternate_path != NULL)
 			rdma_addr_find_smac_by_sgid(
 				&ib_event >param.req_rcvd.alternate_path >sgid,
 				palt_smac, NULL);
 		else
 			palt_smac = NULL;
 	}
 	/*
 	 * Acquire mutex to prevent user executing rdma_destroy_id()
 	 * while we're accessing the cm_id.
 	 */
 	mutex_lock(&lock);
 	if (is_iboe)
 		ib_update_cm_av(cm_id, psmac, palt_smac);
 	if (cma_comp(conn_id, RDMA_CM_CONNECT) &&
 	    (conn_id >id.qp_type != IB_QPT_UD))
 		ib_send_cm_mra(cm_id, CMA_CM_MRA_SETTING, NULL, 0);
 int ib_send_cm_sidr_rep(struct ib_cm_id *cm_id,
 			struct ib_cm_sidr_rep_param *param);
 
 int ib_update_cm_av(struct ib_cm_id *id, const u8 *smac, const u8 *alt_smac);
 #endif /* IB_CM_H */
After patch : 
 			   grh, &av >ah_attr);
 }
 
 static int cm_init_av_by_path(struct ib_sa_path_rec *path, struct cm_av *av)
 {
 	struct cm_device *cm_dev;
 	struct rdma_id_private *listen_id, *conn_id;
 	struct rdma_cm_event event;
 	int offset, ret;
 
 	listen_id = cm_id >context;
 	if (!cma_check_req_qp_type(&listen_id >id, ib_event))
 	ret = conn_id >id.event_handler(&conn_id >id, &event);
 	if (ret)
 		goto err3;
 	/*
 	 * Acquire mutex to prevent user executing rdma_destroy_id()
 	 * while we're accessing the cm_id.
 	 */
 	mutex_lock(&lock);
 	if (cma_comp(conn_id, RDMA_CM_CONNECT) &&
 	    (conn_id >id.qp_type != IB_QPT_UD))
 		ib_send_cm_mra(cm_id, CMA_CM_MRA_SETTING, NULL, 0);
 int ib_send_cm_sidr_rep(struct ib_cm_id *cm_id,
 			struct ib_cm_sidr_rep_param *param);
 
 #endif /* IB_CM_H */
