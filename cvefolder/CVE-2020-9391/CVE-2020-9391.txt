CVE Number : CVE-2020-9391
Commit Message : 
mm: Avoid creating virtual address aliases in brk()/mmap()/mremap()
Commit Details : 
Currently the arm64 kernel ignores the top address byte passed to brk(),
mmap() and mremap(). When the user is not aware of the 56-bit address
limit or relies on the kernel to return an error, untagging such
pointers has the potential to create address aliases in user-space.
Passing a tagged address to munmap(), madvise() is permitted since the
tagged pointer is expected to be inside an existing mapping.

The current behaviour breaks the existing glibc malloc() implementation
which relies on brk() with an address beyond 56-bit to be rejected by
the kernel.

Remove untagging in the above functions by partially reverting commit
ce18d171cb73 ("mm: untag user pointers in mmap/munmap/mremap/brk"). In
addition, update the arm64 tagged-address-abi.rst document accordingly.

Link: https://bugzilla.redhat.com/1797052
Fixes: ce18d171cb73 ("mm: untag user pointers in mmap/munmap/mremap/brk")
Cc: <stable@vger.kernel.org> # 5.4.x-
Cc: Florian Weimer <fweimer@redhat.com>
Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
Reported-by: Victor Stinner <vstinner@redhat.com>
Acked-by: Will Deacon <will@kernel.org>
Acked-by: Andrey Konovalov <andreyknvl@google.com>
Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
Signed-off-by: Will Deacon <will@kernel.org>

Before patch : 
 how the user addresses are used by the kernel:
 
 1. User addresses not accessed by the kernel but used for address space
    management (e.g. ``mmap()``, ``mprotect()``, ``madvise()``). The use
    of valid tagged pointers in this context is always allowed.
 
 2. User addresses accessed by the kernel (e.g. ``write()``). This ABI
    relaxation is disabled by default and the application thread needs to
 	bool downgraded = false;
 	LIST_HEAD(uf);
 
 	brk = untagged_addr(brk);
 
 	if (down_write_killable(&mm >mmap_sem))
 		return  EINTR;
 
 	struct file *file = NULL;
 	unsigned long retval;
 
 	addr = untagged_addr(addr);
 
 	if (!(flags & MAP_ANONYMOUS)) {
 		audit_mmap_fd(fd, flags);
 		file = fget(fd);
 	LIST_HEAD(uf_unmap);
 
 	addr = untagged_addr(addr);
 	new_addr = untagged_addr(new_addr);
 
 	if (flags & ~(MREMAP_FIXED | MREMAP_MAYMOVE))
 		return ret;
After patch : 
 how the user addresses are used by the kernel:
 
 1. User addresses not accessed by the kernel but used for address space
    management (e.g. ``mprotect()``, ``madvise()``). The use of valid
    tagged pointers in this context is allowed with the exception of
    ``brk()``, ``mmap()`` and the ``new_address`` argument to
    ``mremap()`` as these have the potential to alias with existing
    user addresses.
 
    NOTE: This behaviour changed in v5.6 and so some earlier kernels may
    incorrectly accept valid tagged pointers for the ``brk()``,
    ``mmap()`` and ``mremap()`` system calls.
 
 2. User addresses accessed by the kernel (e.g. ``write()``). This ABI
    relaxation is disabled by default and the application thread needs to
 	bool downgraded = false;
 	LIST_HEAD(uf);
 
 	if (down_write_killable(&mm >mmap_sem))
 		return  EINTR;
 
 	struct file *file = NULL;
 	unsigned long retval;
 
 	if (!(flags & MAP_ANONYMOUS)) {
 		audit_mmap_fd(fd, flags);
 		file = fget(fd);
 	LIST_HEAD(uf_unmap);
 
 	addr = untagged_addr(addr);
 
 	if (flags & ~(MREMAP_FIXED | MREMAP_MAYMOVE))
 		return ret;
