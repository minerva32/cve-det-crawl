CVE Number : CVE-2013-3235
Commit Message : 
tipc: fix info leaks via msg_name in recv_msg/recv_stream
Commit Details : 
The code in set_orig_addr() does not initialize all of the members of
struct sockaddr_tipc when filling the sockaddr info -- namely the union
is only partly filled. This will make recv_msg() and recv_stream() --
the only users of this function -- leak kernel stack memory as the
msg_name member is a local variable in net/socket.c.

Additionally to that both recv_msg() and recv_stream() fail to update
the msg_namelen member to 0 while otherwise returning with 0, i.e.
"success". This is the case for, e.g., non-blocking sockets. This will
lead to a 128 byte kernel stack leak in net/socket.c.

Fix the first issue by initializing the memory of the union with
memset(0). Fix the second one by setting msg_namelen to 0 early as it
will be updated later if we're going to fill the msg_name member.

Cc: Jon Maloy <jon.maloy@ericsson.com>
Cc: Allan Stephens <allan.stephens@windriver.com>
Signed-off-by: Mathias Krause <minipli@googlemail.com>
Signed-off-by: David S. Miller <davem@davemloft.net>

Before patch : 
 	if (addr) {
 		addr >family = AF_TIPC;
 		addr >addrtype = TIPC_ADDR_ID;
 		addr >addr.id.ref = msg_origport(msg);
 		addr >addr.id.node = msg_orignode(msg);
 		addr >addr.name.domain = 0;	/* could leave uninitialized */
 		goto exit;
 	}
 
 	timeout = sock_rcvtimeo(sk, flags & MSG_DONTWAIT);
 restart:
 
 		goto exit;
 	}
 
 	target = sock_rcvlowat(sk, flags & MSG_WAITALL, buf_len);
 	timeout = sock_rcvtimeo(sk, flags & MSG_DONTWAIT);
 
After patch : 
 	if (addr) {
 		addr >family = AF_TIPC;
 		addr >addrtype = TIPC_ADDR_ID;
 		memset(&addr >addr, 0, sizeof(addr >addr));
 		addr >addr.id.ref = msg_origport(msg);
 		addr >addr.id.node = msg_orignode(msg);
 		addr >addr.name.domain = 0;	/* could leave uninitialized */
 		goto exit;
 	}
 
 	/* will be updated in set_orig_addr() if needed */
 	m >msg_namelen = 0;
 
 	timeout = sock_rcvtimeo(sk, flags & MSG_DONTWAIT);
 restart:
 
 		goto exit;
 	}
 
 	/* will be updated in set_orig_addr() if needed */
 	m >msg_namelen = 0;
 
 	target = sock_rcvlowat(sk, flags & MSG_WAITALL, buf_len);
 	timeout = sock_rcvtimeo(sk, flags & MSG_DONTWAIT);
 
