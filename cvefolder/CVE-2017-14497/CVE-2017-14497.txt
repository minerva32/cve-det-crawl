CVE Number : CVE-2017-14497
Commit Message : 
packet: Don't write vnet header beyond end of buffer
Commit Details : 
... which may happen with certain values of tp_reserve and maclen.

Fixes: 58d19b19cd99 ("packet: vnet_hdr support for tpacket_rcv")
Signed-off-by: Benjamin Poirier <bpoirier@suse.com>
Cc: Willem de Bruijn <willemb@google.com>
Acked-by: Willem de Bruijn <willemb@google.com>
Signed-off-by: David S. Miller <davem@davemloft.net>

Before patch : 
 	struct timespec ts;
 	__u32 ts_status;
 	bool is_drop_n_account = false;
 
 	/* struct tpacket{2,3}_hdr is aligned to a multiple of TPACKET_ALIGNMENT.
 	 * We may add members to them until current aligned size without forcing
 		netoff = TPACKET_ALIGN(po >tp_hdrlen  
 				       (maclen < 16 ? 16 : maclen))  
 				       po >tp_reserve;
 		if (po >has_vnet_hdr)
 			netoff  = sizeof(struct virtio_net_hdr);
 		macoff = netoff   maclen;
 	}
 	if (po >tp_version <= TPACKET_V2) {
 					skb_set_owner_r(copy_skb, sk);
 			}
 			snaplen = po >rx_ring.frame_size   macoff;
 			if ((int)snaplen < 0)
 				snaplen = 0;
 		}
 	} else if (unlikely(macoff   snaplen >
 			    GET_PBDQC_FROM_RB(&po >rx_ring) >max_frame_len)) {
 		if (unlikely((int)snaplen < 0)) {
 			snaplen = 0;
 			macoff = GET_PBDQC_FROM_RB(&po >rx_ring) >max_frame_len;
 		}
 	}
 	spin_lock(&sk >sk_receive_queue.lock);
 	}
 	spin_unlock(&sk >sk_receive_queue.lock);
 
 	if (po >has_vnet_hdr) {
 		if (virtio_net_hdr_from_skb(skb, h.raw   macoff  
 					    sizeof(struct virtio_net_hdr),
 					    vio_le(), true)) {
After patch : 
 	struct timespec ts;
 	__u32 ts_status;
 	bool is_drop_n_account = false;
 	bool do_vnet = false;
 
 	/* struct tpacket{2,3}_hdr is aligned to a multiple of TPACKET_ALIGNMENT.
 	 * We may add members to them until current aligned size without forcing
 		netoff = TPACKET_ALIGN(po >tp_hdrlen  
 				       (maclen < 16 ? 16 : maclen))  
 				       po >tp_reserve;
 		if (po >has_vnet_hdr) {
 			netoff  = sizeof(struct virtio_net_hdr);
 			do_vnet = true;
 		}
 		macoff = netoff   maclen;
 	}
 	if (po >tp_version <= TPACKET_V2) {
 					skb_set_owner_r(copy_skb, sk);
 			}
 			snaplen = po >rx_ring.frame_size   macoff;
 			if ((int)snaplen < 0) {
 				snaplen = 0;
 				do_vnet = false;
 			}
 		}
 	} else if (unlikely(macoff   snaplen >
 			    GET_PBDQC_FROM_RB(&po >rx_ring) >max_frame_len)) {
 		if (unlikely((int)snaplen < 0)) {
 			snaplen = 0;
 			macoff = GET_PBDQC_FROM_RB(&po >rx_ring) >max_frame_len;
 			do_vnet = false;
 		}
 	}
 	spin_lock(&sk >sk_receive_queue.lock);
 	}
 	spin_unlock(&sk >sk_receive_queue.lock);
 
 	if (do_vnet) {
 		if (virtio_net_hdr_from_skb(skb, h.raw   macoff  
 					    sizeof(struct virtio_net_hdr),
 					    vio_le(), true)) {
