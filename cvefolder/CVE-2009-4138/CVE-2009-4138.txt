CVE Number : CVE-2009-4138
Commit Message : 
firewire: ohci: handle receive packets with a data length of zero
Commit Details : 
Queueing to receive an ISO packet with a payload length of zero
silently does nothing in dualbuffer mode, and crashes the kernel in
packet-per-buffer mode.  Return an error in dualbuffer mode, because
the DMA controller won't let us do what we want, and work correctly in
packet-per-buffer mode.

Signed-off-by: Jay Fenlason <fenlason@redhat.com>
Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
Cc: stable@kernel.org

Before patch : 
 	page     = payload >> PAGE_SHIFT;
 	offset   = payload & ~PAGE_MASK;
 	rest     = p >payload_length;
 
 	/* FIXME: make packet per buffer/dual buffer a context option */
 	while (rest > 0) {
 					unsigned long payload)
 {
 	struct iso_context *ctx = container_of(base, struct iso_context, base);
 	struct descriptor *d = NULL, *pd = NULL;
 	struct fw_iso_packet *p = packet;
 	dma_addr_t d_bus, page_bus;
 	u32 z, header_z, rest;
 		d >data_address = cpu_to_le32(d_bus   (z * sizeof(*d)));
 
 		rest = payload_per_buffer;
 		for (j = 1; j < z; j  ) {
 			pd = d   j;
 			pd >control = cpu_to_le16(DESCRIPTOR_STATUS |
 						  DESCRIPTOR_INPUT_MORE);
 
After patch : 
 	page     = payload >> PAGE_SHIFT;
 	offset   = payload & ~PAGE_MASK;
 	rest     = p >payload_length;
 	/*
 	 * The controllers I've tested have not worked correctly when
 	 * second_req_count is zero.  Rather than do something we know won't
 	 * work, return an error
 	 */
 	if (rest == 0)
 		return  EINVAL;
 
 	/* FIXME: make packet per buffer/dual buffer a context option */
 	while (rest > 0) {
 					unsigned long payload)
 {
 	struct iso_context *ctx = container_of(base, struct iso_context, base);
 	struct descriptor *d, *pd;
 	struct fw_iso_packet *p = packet;
 	dma_addr_t d_bus, page_bus;
 	u32 z, header_z, rest;
 		d >data_address = cpu_to_le32(d_bus   (z * sizeof(*d)));
 
 		rest = payload_per_buffer;
 		pd = d;
 		for (j = 1; j < z; j  ) {
 			pd  ;
 			pd >control = cpu_to_le16(DESCRIPTOR_STATUS |
 						  DESCRIPTOR_INPUT_MORE);
 
