CVE Number : CVE-2020-29661
Commit Message : 
tty: Fix ->pgrp locking in tiocspgrp()
Commit Details : 
tiocspgrp() takes two tty_struct pointers: One to the tty that userspace
passed to ioctl() (`tty`) and one to the TTY being changed (`real_tty`).
These pointers are different when ioctl() is called with a master fd.

To properly lock real_tty->pgrp, we must take real_tty->ctrl_lock.

This bug makes it possible for racing ioctl(TIOCSPGRP, ...) calls on
both sides of a PTY pair to corrupt the refcount of `struct pid`,
leading to use-after-free errors.

Fixes: 47f86834bbd4 ("redo locking of tty->pgrp")
CC: stable@kernel.org
Signed-off-by: Jann Horn <jannh@google.com>
Reviewed-by: Jiri Slaby <jirislaby@kernel.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Before patch : 
 	if (session_of_pgrp(pgrp) != task_session(current))
 		goto out_unlock;
 	retval = 0;
 	spin_lock_irq(&tty >ctrl_lock);
 	put_pid(real_tty >pgrp);
 	real_tty >pgrp = get_pid(pgrp);
 	spin_unlock_irq(&tty >ctrl_lock);
 out_unlock:
 	rcu_read_unlock();
 	return retval;
After patch : 
 	if (session_of_pgrp(pgrp) != task_session(current))
 		goto out_unlock;
 	retval = 0;
 	spin_lock_irq(&real_tty >ctrl_lock);
 	put_pid(real_tty >pgrp);
 	real_tty >pgrp = get_pid(pgrp);
 	spin_unlock_irq(&real_tty >ctrl_lock);
 out_unlock:
 	rcu_read_unlock();
 	return retval;
