CVE Number : CVE-2016-4998
Commit Message : 
netfilter: x_tables: make sure e->next_offset covers remaining blob size
Commit Details : 
Otherwise this function may read data beyond the ruleset blob.

Signed-off-by: Florian Westphal <fw@strlen.de>
Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Before patch : 
 	int err;
 
 	if ((unsigned long)e % __alignof__(struct arpt_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct arpt_entry) >= limit) {
 		duprintf("Bad offset %p\n", e);
 		return  EINVAL;
 	}
 
 	duprintf("check_compat_entry_size_and_hooks %p\n", e);
 	if ((unsigned long)e % __alignof__(struct compat_arpt_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct compat_arpt_entry) >= limit) {
 		duprintf("Bad offset %p, limit = %p\n", e, limit);
 		return  EINVAL;
 	}
 	int err;
 
 	if ((unsigned long)e % __alignof__(struct ipt_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct ipt_entry) >= limit) {
 		duprintf("Bad offset %p\n", e);
 		return  EINVAL;
 	}
 
 	duprintf("check_compat_entry_size_and_hooks %p\n", e);
 	if ((unsigned long)e % __alignof__(struct compat_ipt_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct compat_ipt_entry) >= limit) {
 		duprintf("Bad offset %p, limit = %p\n", e, limit);
 		return  EINVAL;
 	}
 	int err;
 
 	if ((unsigned long)e % __alignof__(struct ip6t_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct ip6t_entry) >= limit) {
 		duprintf("Bad offset %p\n", e);
 		return  EINVAL;
 	}
 
 	duprintf("check_compat_entry_size_and_hooks %p\n", e);
 	if ((unsigned long)e % __alignof__(struct compat_ip6t_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct compat_ip6t_entry) >= limit) {
 		duprintf("Bad offset %p, limit = %p\n", e, limit);
 		return  EINVAL;
 	}
After patch : 
 	int err;
 
 	if ((unsigned long)e % __alignof__(struct arpt_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct arpt_entry) >= limit ||
 	    (unsigned char *)e   e >next_offset > limit) {
 		duprintf("Bad offset %p\n", e);
 		return  EINVAL;
 	}
 
 	duprintf("check_compat_entry_size_and_hooks %p\n", e);
 	if ((unsigned long)e % __alignof__(struct compat_arpt_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct compat_arpt_entry) >= limit ||
 	    (unsigned char *)e   e >next_offset > limit) {
 		duprintf("Bad offset %p, limit = %p\n", e, limit);
 		return  EINVAL;
 	}
 	int err;
 
 	if ((unsigned long)e % __alignof__(struct ipt_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct ipt_entry) >= limit ||
 	    (unsigned char *)e   e >next_offset > limit) {
 		duprintf("Bad offset %p\n", e);
 		return  EINVAL;
 	}
 
 	duprintf("check_compat_entry_size_and_hooks %p\n", e);
 	if ((unsigned long)e % __alignof__(struct compat_ipt_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct compat_ipt_entry) >= limit ||
 	    (unsigned char *)e   e >next_offset > limit) {
 		duprintf("Bad offset %p, limit = %p\n", e, limit);
 		return  EINVAL;
 	}
 	int err;
 
 	if ((unsigned long)e % __alignof__(struct ip6t_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct ip6t_entry) >= limit ||
 	    (unsigned char *)e   e >next_offset > limit) {
 		duprintf("Bad offset %p\n", e);
 		return  EINVAL;
 	}
 
 	duprintf("check_compat_entry_size_and_hooks %p\n", e);
 	if ((unsigned long)e % __alignof__(struct compat_ip6t_entry) != 0 ||
 	    (unsigned char *)e   sizeof(struct compat_ip6t_entry) >= limit ||
 	    (unsigned char *)e   e >next_offset > limit) {
 		duprintf("Bad offset %p, limit = %p\n", e, limit);
 		return  EINVAL;
 	}
