CVE Number : CVE-2013-1956
Commit Message : 
userns:  Don't allow creation if the user is chrooted
Commit Details : 
Guarantee that the policy of which files may be access that is
established by setting the root directory will not be violated
by user namespaces by verifying that the root directory points
to the root of the mount namespace at the time of user namespace
creation.

Changing the root is a privileged operation, and as a matter of policy
it serves to limit unprivileged processes to files below the current
root directory.

For reasons of simplicity and comprehensibility the privilege to
change the root directory is gated solely on the CAP_SYS_CHROOT
capability in the user namespace.  Therefore when creating a user
namespace we must ensure that the policy of which files may be access
can not be violated by changing the root directory.

Anyone who runs a processes in a chroot and would like to use user
namespace can setup the same view of filesystems with a mount
namespace instead.  With this result that this is not a practical
limitation for using user namespaces.

Cc: stable@vger.kernel.org
Acked-by: Serge Hallyn <serge.hallyn@canonical.com>
Reported-by: Andy Lutomirski <luto@amacapital.net>
Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>

Before patch : 
 	return check_mnt(real_mount(mnt));
 }
 
 static void *mntns_get(struct task_struct *task)
 {
 	struct mnt_namespace *ns = NULL;
 	spin_unlock(&fs >lock);
 }
 
 #endif /* _LINUX_FS_STRUCT_H */
 	kgid_t group = new >egid;
 	int ret;
 
 	/* The creator needs a mapping in the parent user namespace
 	 * or else we won't be able to reasonably tell userspace who
 	 * created a user_namespace.
After patch : 
 	return check_mnt(real_mount(mnt));
 }
 
 bool current_chrooted(void)
 {
 	/* Does the current process have a non standard root */
 	struct path ns_root;
 	struct path fs_root;
 	bool chrooted;
 
 	/* Find the namespace root */
 	ns_root.mnt = &current >nsproxy >mnt_ns >root >mnt;
 	ns_root.dentry = ns_root.mnt >mnt_root;
 	path_get(&ns_root);
 	while (d_mountpoint(ns_root.dentry) && follow_down_one(&ns_root))
 		;
 
 	get_fs_root(current >fs, &fs_root);
 
 	chrooted = !path_equal(&fs_root, &ns_root);
 
 	path_put(&fs_root);
 	path_put(&ns_root);
 
 	return chrooted;
 }
 
 static void *mntns_get(struct task_struct *task)
 {
 	struct mnt_namespace *ns = NULL;
 	spin_unlock(&fs >lock);
 }
 
 extern bool current_chrooted(void);
 
 #endif /* _LINUX_FS_STRUCT_H */
 	kgid_t group = new >egid;
 	int ret;
 
 	/*
 	 * Verify that we can not violate the policy of which files
 	 * may be accessed that is specified by the root directory,
 	 * by verifing that the root directory is at the root of the
 	 * mount namespace which allows all files to be accessed.
 	 */
 	if (current_chrooted())
 		return  EPERM;
 
 	/* The creator needs a mapping in the parent user namespace
 	 * or else we won't be able to reasonably tell userspace who
 	 * created a user_namespace.
