CVE Number : CVE-2013-2017
Commit Message : 
veth: Dont kfree_skb() after dev_forward_skb()
Commit Details : 
In case of congestion, netif_rx() frees the skb, so we must assume
dev_forward_skb() also consume skb.

Bug introduced by commit 445409602c092
(veth: move loopback logic to common location)

We must change dev_forward_skb() to always consume skb, and veth to not
double free it.

Bug report : http://marc.info/?l=linux-netdev&m=127310770900442&w=3

Reported-by: Mart√≠n Ferrari <martin.ferrari@gmail.com>
Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
Signed-off-by: David S. Miller <davem@davemloft.net>

Before patch : 
 	return NETDEV_TX_OK;
 
 rx_drop:
 	kfree_skb(skb);
 	rcv_stats >rx_dropped  ;
 	return NETDEV_TX_OK;
 }
  *
  * return values:
  *	NET_RX_SUCCESS	(no congestion)
  *	NET_RX_DROP     (packet was dropped)
  *
  * dev_forward_skb can be used for injecting an skb from the
  * start_xmit function of one device into the receive queue
 {
 	skb_orphan(skb);
 
 	if (!(dev >flags & IFF_UP))
 		return NET_RX_DROP;
 
 	if (skb >len > (dev >mtu   dev >hard_header_len))
 		return NET_RX_DROP;
 
 	skb_set_dev(skb, dev);
 	skb >tstamp.tv64 = 0;
 	skb >pkt_type = PACKET_HOST;
After patch : 
 	return NETDEV_TX_OK;
 
 rx_drop:
 	rcv_stats >rx_dropped  ;
 	return NETDEV_TX_OK;
 }
  *
  * return values:
  *	NET_RX_SUCCESS	(no congestion)
  *	NET_RX_DROP     (packet was dropped, but freed)
  *
  * dev_forward_skb can be used for injecting an skb from the
  * start_xmit function of one device into the receive queue
 {
 	skb_orphan(skb);
 
 	if (!(dev >flags & IFF_UP) ||
 	    (skb >len > (dev >mtu   dev >hard_header_len))) {
 		kfree_skb(skb);
 		return NET_RX_DROP;
 	}
 	skb_set_dev(skb, dev);
 	skb >tstamp.tv64 = 0;
 	skb >pkt_type = PACKET_HOST;
