CVE Number : CVE-2005-2800
Commit Message : 
PATCH sg.c: fix a memory leak in devices seq_file implementation
Commit Details : 
I know that scsi procfs is legacy code but this is a fix for a memory leak.

While reading through sg.c I realized that the implementation of
/proc/scsi/sg/devices with seq_file is leaking memory due to freeing the
pointer returned by the next() iterator method.  Since next() might return
NULL or an error this is wrong.  This patch fixes it through using the
seq_files private field for holding the reference to the iterator object.

Here is a small bash script to trigger the leak. Use slabtop to watch
the size-32 usage grow and grow.

#!/bin/sh

while true; do
	cat /proc/scsi/sg/devices > /dev/null
done

Signed-off-by: Jan Blunck <j.blunck@tu-harburg.de>
Acked-by: James Bottomley <James.Bottomley@steeleye.com>
Signed-off-by: Andrew Morton <akpm@osdl.org>
Signed-off-by: Linus Torvalds <torvalds@osdl.org>

Before patch : 
 {
 	struct sg_proc_deviter * it = kmalloc(sizeof(*it), GFP_KERNEL);
 
 	if (! it)
 		return NULL;
 	if (NULL == sg_dev_arr)
 		goto err1;
 	it >index = *pos;
 	it >max = sg_last_dev();
 	if (it >index >= it >max)
 		goto err1;
 	return it;
 err1:
 	kfree(it);
 	return NULL;
 }
 
 static void * dev_seq_next(struct seq_file *s, void *v, loff_t *pos)
 {
 	struct sg_proc_deviter * it = (struct sg_proc_deviter *) v;
 
 	*pos =   it >index;
 	return (it >index < it >max) ? it : NULL;
 
 static void dev_seq_stop(struct seq_file *s, void *v)
 {
 	kfree (v);
 }
 
 static int sg_proc_open_dev(struct inode *inode, struct file *file)
After patch : 
 {
 	struct sg_proc_deviter * it = kmalloc(sizeof(*it), GFP_KERNEL);
 
 	s >private = it;
 	if (! it)
 		return NULL;
 
 	if (NULL == sg_dev_arr)
 		return NULL;
 	it >index = *pos;
 	it >max = sg_last_dev();
 	if (it >index >= it >max)
 		return NULL;
 	return it;
 }
 
 static void * dev_seq_next(struct seq_file *s, void *v, loff_t *pos)
 {
 	struct sg_proc_deviter * it = s >private;
 
 	*pos =   it >index;
 	return (it >index < it >max) ? it : NULL;
 
 static void dev_seq_stop(struct seq_file *s, void *v)
 {
 	kfree(s >private);
 }
 
 static int sg_proc_open_dev(struct inode *inode, struct file *file)
