CVE Number : CVE-2016-3955
Commit Message : 
USB: usbip: fix potential out-of-bounds write
Commit Details : 
Fix potential out-of-bounds write to urb->transfer_buffer
usbip handles network communication directly in the kernel. When receiving a
packet from its peer, usbip code parses headers according to protocol. As
part of this parsing urb->actual_length is filled. Since the input for
urb->actual_length comes from the network, it should be treated as untrusted.
Any entity controlling the network may put any value in the input and the
preallocated urb->transfer_buffer may not be large enough to hold the data.
Thus, the malicious entity is able to write arbitrary data to kernel memory.

Signed-off-by: Ignat Korchagin <ignat.korchagin@gmail.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Before patch : 
 	if (!(size > 0))
 		return 0;
 
 	ret = usbip_recv(ud >tcp_socket, urb >transfer_buffer, size);
 	if (ret != size) {
 		dev_err(&urb >dev >dev, "recv xbuf, %d\n", ret);
After patch : 
 	if (!(size > 0))
 		return 0;
 
 	if (size > urb >transfer_buffer_length) {
 		/* should not happen, probably malicious packet */
 		if (ud >side == USBIP_STUB) {
 			usbip_event_add(ud, SDEV_EVENT_ERROR_TCP);
 			return 0;
 		} else {
 			usbip_event_add(ud, VDEV_EVENT_ERROR_TCP);
 			return  EPIPE;
 		}
 	}
 
 	ret = usbip_recv(ud >tcp_socket, urb >transfer_buffer, size);
 	if (ret != size) {
 		dev_err(&urb >dev >dev, "recv xbuf, %d\n", ret);
