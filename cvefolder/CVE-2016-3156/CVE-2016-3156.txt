CVE Number : CVE-2016-3156
Commit Message : 
ipv4: Don't do expensive useless work during inetdev destroy.
Commit Details : 
When an inetdev is destroyed, every address assigned to the interface
is removed.  And in this scenerio we do two pointless things which can
be very expensive if the number of assigned interfaces is large:

1) Address promotion.  We are deleting all addresses, so there is no
   point in doing this.

2) A full nf conntrack table purge for every address.  We only need to
   do this once, as is already caught by the existing
   masq_dev_notifier so masq_inet_event() can skip this.

Reported-by: Solar Designer <solar@openwall.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Tested-by: Cyrill Gorcunov <gorcunov@openvz.org>

Before patch : 
 
 	ASSERT_RTNL();
 
 	/* 1. Deleting primary ifaddr forces deletion all secondaries
 	 * unless alias promotion is set
 	 **/
 			fib_del_ifaddr(ifa, ifa1);
 	}
 
 	/* 2. Unlink it */
 
 	*ifap = ifa1 >ifa_next;
 		subnet = 1;
 	}
 
 	/* Deletion is more complicated than add.
 	 * We should take care of not to delete too much : )
 	 *
 		}
 	}
 
 	if (!(ok & BRD_OK))
 		fib_magic(RTM_DELROUTE, RTN_BROADCAST, ifa >ifa_broadcast, 32, prim);
 	if (subnet && ifa >ifa_prefixlen < 31) {
 			   unsigned long event,
 			   void *ptr)
 {
 	struct net_device *dev = ((struct in_ifaddr *)ptr) >ifa_dev >dev;
 	struct netdev_notifier_info info;
 
 	netdev_notifier_info_init(&info, dev);
 	return masq_device_event(this, event, &info);
 }
 
After patch : 
 
 	ASSERT_RTNL();
 
 	if (in_dev >dead)
 		goto no_promotions;
 
 	/* 1. Deleting primary ifaddr forces deletion all secondaries
 	 * unless alias promotion is set
 	 **/
 			fib_del_ifaddr(ifa, ifa1);
 	}
 
 no_promotions:
 	/* 2. Unlink it */
 
 	*ifap = ifa1 >ifa_next;
 		subnet = 1;
 	}
 
 	if (in_dev >dead)
 		goto no_promotions;
 
 	/* Deletion is more complicated than add.
 	 * We should take care of not to delete too much : )
 	 *
 		}
 	}
 
 no_promotions:
 	if (!(ok & BRD_OK))
 		fib_magic(RTM_DELROUTE, RTN_BROADCAST, ifa >ifa_broadcast, 32, prim);
 	if (subnet && ifa >ifa_prefixlen < 31) {
 			   unsigned long event,
 			   void *ptr)
 {
 	struct in_device *idev = ((struct in_ifaddr *)ptr) >ifa_dev;
 	struct netdev_notifier_info info;
 
 	/* The masq_dev_notifier will catch the case of the device going
 	 * down.  So if the inetdev is dead and being destroyed we have
 	 * no work to do.  Otherwise this is an individual address removal
 	 * and we have to perform the flush.
 	 */
 	if (idev >dead)
 		return NOTIFY_DONE;
 
 	netdev_notifier_info_init(&info, idev >dev);
 	return masq_device_event(this, event, &info);
 }
 
