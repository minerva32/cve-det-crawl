CVE Number : CVE-2010-0622
Commit Message : 
futex: Handle user space corruption gracefully
Commit Details : 
If the owner of a PI futex dies we fix up the pi_state and set
pi_state->owner to NULL. When a malicious or just sloppy programmed
user space application sets the futex value to 0 e.g. by calling
pthread_mutex_init(), then the futex can be acquired again. A new
waiter manages to enqueue itself on the pi_state w/o damage, but on
unlock the kernel dereferences pi_state->owner and oopses.

Prevent this by checking pi_state->owner in the unlock path. If
pi_state->owner is not current we know that user space manipulated the
futex value. Ignore the mess and return -EINVAL.

This catches the above case and also the case where a task hijacks the
futex by setting the tid value and then tries to unlock it.

Reported-by: Jermome Marchand <jmarchan@redhat.com>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Acked-by: Darren Hart <dvhltc@us.ibm.com>
Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
Cc: <stable@kernel.org>


Before patch : 
 	if (!pi_state)
 		return  EINVAL;
 
 	raw_spin_lock(&pi_state >pi_mutex.wait_lock);
 	new_owner = rt_mutex_next_owner(&pi_state >pi_mutex);
 
After patch : 
 	if (!pi_state)
 		return  EINVAL;
 
 	/*
 	 * If current does not own the pi_state then the futex is
 	 * inconsistent and user space fiddled with the futex value.
 	 */
 	if (pi_state >owner != current)
 		return  EINVAL;
 
 	raw_spin_lock(&pi_state >pi_mutex.wait_lock);
 	new_owner = rt_mutex_next_owner(&pi_state >pi_mutex);
 
