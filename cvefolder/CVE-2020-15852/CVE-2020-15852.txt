CVE Number : CVE-2020-15852
Commit Message : 
x86/ioperm: Fix io bitmap invalidation on Xen PV
Commit Details : 
tss_invalidate_io_bitmap() wasn't wired up properly through the pvop
machinery, so the TSS and Xen's io bitmap would get out of sync
whenever disabling a valid io bitmap.

Add a new pvop for tss_invalidate_io_bitmap() to fix it.

This is XSA-329.

Fixes: 22fe5b0439dd ("x86/ioperm: Move TSS bitmap update to exit to user work")
Signed-off-by: Andy Lutomirski <luto@kernel.org>
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Reviewed-by: Juergen Gross <jgross@suse.com>
Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/r/d53075590e1f91c19f8af705059d3ff99424c020.1595030016.git.luto@kernel.org

Before patch : 
 void io_bitmap_share(struct task_struct *tsk);
 void io_bitmap_exit(struct task_struct *tsk);
 
 void native_tss_update_io_bitmap(void);
 
 #ifdef CONFIG_PARAVIRT_XXL
 #include <asm/paravirt.h>
 #else
 #define tss_update_io_bitmap native_tss_update_io_bitmap
 #endif
 
 #else
 }
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 static inline void tss_update_io_bitmap(void)
 {
 	PVOP_VCALL0(cpu.update_io_bitmap);
 	void (*load_sp0)(unsigned long sp0);
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 	void (*update_io_bitmap)(void);
 #endif
 
 	.cpu.swapgs		= native_swapgs,
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 	.cpu.update_io_bitmap	= native_tss_update_io_bitmap,
 #endif
 
 	.cpu.start_context_switch	= paravirt_nop,
 }
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 static inline void tss_invalidate_io_bitmap(struct tss_struct *tss)
 {
 	/*
 	 * Invalidate the I/O bitmap by moving io_bitmap_base outside the
 	 * TSS limit so any subsequent I/O access from user space will
 	 * trigger a #GP.
 	 *
 	 * This is correct even when VMEXIT rewrites the TSS limit
 	 * to 0x67 as the only requirement is that the base points
 	 * outside the limit.
 	 */
 	tss >x86_tss.io_bitmap_base = IO_BITMAP_OFFSET_INVALID;
 }
 
 static inline void switch_to_bitmap(unsigned long tifp)
 {
 	/*
 	 * user mode.
 	 */
 	if (tifp & _TIF_IO_BITMAP)
 		tss_invalidate_io_bitmap(this_cpu_ptr(&cpu_tss_rw));
 }
 
 static void tss_copy_io_bitmap(struct tss_struct *tss, struct io_bitmap *iobm)
 	u16 *base = &tss >x86_tss.io_bitmap_base;
 
 	if (!test_thread_flag(TIF_IO_BITMAP)) {
 		tss_invalidate_io_bitmap(tss);
 		return;
 	}
 
 }
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 static void xen_update_io_bitmap(void)
 {
 	struct physdev_set_iobitmap iobitmap;
 	.load_sp0 = xen_load_sp0,
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 	.update_io_bitmap = xen_update_io_bitmap,
 #endif
 	.io_delay = xen_io_delay,
After patch : 
 void io_bitmap_share(struct task_struct *tsk);
 void io_bitmap_exit(struct task_struct *tsk);
 
 static inline void native_tss_invalidate_io_bitmap(void)
 {
 	/*
 	 * Invalidate the I/O bitmap by moving io_bitmap_base outside the
 	 * TSS limit so any subsequent I/O access from user space will
 	 * trigger a #GP.
 	 *
 	 * This is correct even when VMEXIT rewrites the TSS limit
 	 * to 0x67 as the only requirement is that the base points
 	 * outside the limit.
 	 */
 	this_cpu_write(cpu_tss_rw.x86_tss.io_bitmap_base,
 		       IO_BITMAP_OFFSET_INVALID);
 }
 
 void native_tss_update_io_bitmap(void);
 
 #ifdef CONFIG_PARAVIRT_XXL
 #include <asm/paravirt.h>
 #else
 #define tss_update_io_bitmap native_tss_update_io_bitmap
 #define tss_invalidate_io_bitmap native_tss_invalidate_io_bitmap
 #endif
 
 #else
 }
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 static inline void tss_invalidate_io_bitmap(void)
 {
 	PVOP_VCALL0(cpu.invalidate_io_bitmap);
 }
 
 static inline void tss_update_io_bitmap(void)
 {
 	PVOP_VCALL0(cpu.update_io_bitmap);
 	void (*load_sp0)(unsigned long sp0);
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 	void (*invalidate_io_bitmap)(void);
 	void (*update_io_bitmap)(void);
 #endif
 
 	.cpu.swapgs		= native_swapgs,
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 	.cpu.invalidate_io_bitmap	= native_tss_invalidate_io_bitmap,
 	.cpu.update_io_bitmap		= native_tss_update_io_bitmap,
 #endif
 
 	.cpu.start_context_switch	= paravirt_nop,
 }
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 static inline void switch_to_bitmap(unsigned long tifp)
 {
 	/*
 	 * user mode.
 	 */
 	if (tifp & _TIF_IO_BITMAP)
 		tss_invalidate_io_bitmap();
 }
 
 static void tss_copy_io_bitmap(struct tss_struct *tss, struct io_bitmap *iobm)
 	u16 *base = &tss >x86_tss.io_bitmap_base;
 
 	if (!test_thread_flag(TIF_IO_BITMAP)) {
 		native_tss_invalidate_io_bitmap();
 		return;
 	}
 
 }
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 static void xen_invalidate_io_bitmap(void)
 {
 	struct physdev_set_iobitmap iobitmap = {
 		.bitmap = 0,
 		.nr_ports = 0,
 	};
 
 	native_tss_invalidate_io_bitmap();
 	HYPERVISOR_physdev_op(PHYSDEVOP_set_iobitmap, &iobitmap);
 }
 
 static void xen_update_io_bitmap(void)
 {
 	struct physdev_set_iobitmap iobitmap;
 	.load_sp0 = xen_load_sp0,
 
 #ifdef CONFIG_X86_IOPL_IOPERM
 	.invalidate_io_bitmap = xen_invalidate_io_bitmap,
 	.update_io_bitmap = xen_update_io_bitmap,
 #endif
 	.io_delay = xen_io_delay,
