CVE Number : CVE-2010-4243
Commit Message : 
exec: make argv/envp memory visible to oom-killer
Commit Details : 
Brad Spengler published a local memory-allocation DoS that
evades the OOM-killer (though not the virtual memory RLIMIT):
http://www.grsecurity.net/~spender/64bit_dos.c

execve()->copy_strings() can allocate a lot of memory, but
this is not visible to oom-killer, nobody can see the nascent
bprm->mm and take it into account.

With this patch get_arg_page() increments current's MM_ANONPAGES
counter every time we allocate the new page for argv/envp. When
do_execve() succeds or fails, we change this counter back.

Technically this is not 100% correct, we can't know if the new
page is swapped out and turn MM_ANONPAGES into MM_SWAPENTS, but
I don't think this really matters and everything becomes correct
once exec changes ->mm or fails.

Reported-by: Brad Spengler <spender@grsecurity.net>
Reviewed-and-discussed-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
Signed-off-by: Oleg Nesterov <oleg@redhat.com>
Cc: stable@kernel.org
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Before patch : 
 
 #ifdef CONFIG_MMU
 
 static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
 		int write)
 {
 		unsigned long size = bprm >vma >vm_end   bprm >vma >vm_start;
 		struct rlimit *rlim;
 
 		/*
 		 * We've historically supported up to 32 pages (ARG_MAX)
 		 * of argument strings even with small stacks
 
 #else
 
 static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
 		int write)
 {
 	/*
 	 * Release all of the old mmap stuff
 	 */
 	retval = exec_mmap(bprm >mm);
 	if (retval)
 		goto out;
 	return retval;
 
 out:
 	if (bprm >mm)
 		mmput (bprm >mm);
 
 out_file:
 	if (bprm >file) {
 	char buf[BINPRM_BUF_SIZE];
 #ifdef CONFIG_MMU
 	struct vm_area_struct *vma;
 #else
 # define MAX_ARG_PAGES	32
 	struct page *page[MAX_ARG_PAGES];
After patch : 
 
 #ifdef CONFIG_MMU
 
 static void acct_arg_size(struct linux_binprm *bprm, unsigned long pages)
 {
 	struct mm_struct *mm = current >mm;
 	long diff = (long)(pages   bprm >vma_pages);
 
 	if (!mm || !diff)
 		return;
 
 	bprm >vma_pages = pages;
 
 #ifdef SPLIT_RSS_COUNTING
 	add_mm_counter(mm, MM_ANONPAGES, diff);
 #else
 	spin_lock(&mm >page_table_lock);
 	add_mm_counter(mm, MM_ANONPAGES, diff);
 	spin_unlock(&mm >page_table_lock);
 #endif
 }
 
 static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
 		int write)
 {
 		unsigned long size = bprm >vma >vm_end   bprm >vma >vm_start;
 		struct rlimit *rlim;
 
 		acct_arg_size(bprm, size / PAGE_SIZE);
 
 		/*
 		 * We've historically supported up to 32 pages (ARG_MAX)
 		 * of argument strings even with small stacks
 
 #else
 
 static inline void acct_arg_size(struct linux_binprm *bprm, unsigned long pages)
 {
 }
 
 static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,
 		int write)
 {
 	/*
 	 * Release all of the old mmap stuff
 	 */
 	acct_arg_size(bprm, 0);
 	retval = exec_mmap(bprm >mm);
 	if (retval)
 		goto out;
 	return retval;
 
 out:
 	if (bprm >mm) {
 		acct_arg_size(bprm, 0);
 		mmput(bprm >mm);
 	}
 
 out_file:
 	if (bprm >file) {
 	char buf[BINPRM_BUF_SIZE];
 #ifdef CONFIG_MMU
 	struct vm_area_struct *vma;
 	unsigned long vma_pages;
 #else
 # define MAX_ARG_PAGES	32
 	struct page *page[MAX_ARG_PAGES];
