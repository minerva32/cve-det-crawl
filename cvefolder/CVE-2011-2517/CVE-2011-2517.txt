CVE Number : CVE-2011-2517
Commit Message : 
nl80211: fix check for valid SSID size in scan operations
Commit Details : 
In both trigger_scan and sched_scan operations, we were checking for
the SSID length before assigning the value correctly.  Since the
memory was just kzalloc'ed, the check was always failing and SSID with
over 32 characters were allowed to go through.

This was causing a buffer overflow when copying the actual SSID to the
proper place.

This bug has been there since 2.6.29-rc4.

Cc: stable@kernel.org
Signed-off-by: Luciano Coelho <coelho@ti.com>
Signed-off-by: John W. Linville <linville@tuxdriver.com>

Before patch : 
 	i = 0;
 	if (info >attrs[NL80211_ATTR_SCAN_SSIDS]) {
 		nla_for_each_nested(attr, info >attrs[NL80211_ATTR_SCAN_SSIDS], tmp) {
 			if (request >ssids[i].ssid_len > IEEE80211_MAX_SSID_LEN) {
 				err =  EINVAL;
 				goto out_free;
 			}
 			memcpy(request >ssids[i].ssid, nla_data(attr), nla_len(attr));
 			request >ssids[i].ssid_len = nla_len(attr);
 			i  ;
 		}
 	}
 	if (info >attrs[NL80211_ATTR_SCAN_SSIDS]) {
 		nla_for_each_nested(attr, info >attrs[NL80211_ATTR_SCAN_SSIDS],
 				    tmp) {
 			if (request >ssids[i].ssid_len >
 			    IEEE80211_MAX_SSID_LEN) {
 				err =  EINVAL;
 			}
 			memcpy(request >ssids[i].ssid, nla_data(attr),
 			       nla_len(attr));
 			request >ssids[i].ssid_len = nla_len(attr);
 			i  ;
 		}
 	}
After patch : 
 	i = 0;
 	if (info >attrs[NL80211_ATTR_SCAN_SSIDS]) {
 		nla_for_each_nested(attr, info >attrs[NL80211_ATTR_SCAN_SSIDS], tmp) {
 			request >ssids[i].ssid_len = nla_len(attr);
 			if (request >ssids[i].ssid_len > IEEE80211_MAX_SSID_LEN) {
 				err =  EINVAL;
 				goto out_free;
 			}
 			memcpy(request >ssids[i].ssid, nla_data(attr), nla_len(attr));
 			i  ;
 		}
 	}
 	if (info >attrs[NL80211_ATTR_SCAN_SSIDS]) {
 		nla_for_each_nested(attr, info >attrs[NL80211_ATTR_SCAN_SSIDS],
 				    tmp) {
 			request >ssids[i].ssid_len = nla_len(attr);
 			if (request >ssids[i].ssid_len >
 			    IEEE80211_MAX_SSID_LEN) {
 				err =  EINVAL;
 			}
 			memcpy(request >ssids[i].ssid, nla_data(attr),
 			       nla_len(attr));
 			i  ;
 		}
 	}
