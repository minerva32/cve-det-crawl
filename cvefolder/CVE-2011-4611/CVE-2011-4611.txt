CVE Number : CVE-2011-4611
Commit Message : 
perf, powerpc: Handle events that raise an exception without overflowing
Commit Details : 
Events on POWER7 can roll back if a speculative event doesn't
eventually complete. Unfortunately in some rare cases they will
raise a performance monitor exception. We need to catch this to
ensure we reset the PMC. In all cases the PMC will be 256 or less
cycles from overflow.

Signed-off-by: Anton Blanchard <anton@samba.org>
Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
Cc: <stable@kernel.org> # as far back as it applies cleanly
LKML-Reference: <20110309143842.6c22845e@kryten>
Signed-off-by: Ingo Molnar <mingo@elte.hu>

Before patch : 
 #define PV_970		0x0039
 #define PV_POWER5	0x003A
 #define PV_POWER5p	0x003B
 #define PV_970FX	0x003C
 #define PV_630		0x0040
 #define PV_630p	0x0041
 	return ip;
 }
 
 /*
  * Performance monitor interrupt stuff
  */
 			if (is_limited_pmc(i   1))
 				continue;
 			val = read_pmc(i   1);
 			if ((int)val < 0)
 				write_pmc(i   1, 0);
 		}
 	}
After patch : 
 #define PV_970		0x0039
 #define PV_POWER5	0x003A
 #define PV_POWER5p	0x003B
 #define PV_POWER7	0x003F
 #define PV_970FX	0x003C
 #define PV_630		0x0040
 #define PV_630p	0x0041
 	return ip;
 }
 
 static bool pmc_overflow(unsigned long val)
 {
 	if ((int)val < 0)
 		return true;
 
 	/*
 	 * Events on POWER7 can roll back if a speculative event doesn't
 	 * eventually complete. Unfortunately in some rare cases they will
 	 * raise a performance monitor exception. We need to catch this to
 	 * ensure we reset the PMC. In all cases the PMC will be 256 or less
 	 * cycles from overflow.
 	 *
 	 * We only do this if the first pass fails to find any overflowing
 	 * PMCs because a user might set a period of less than 256 and we
 	 * don't want to mistakenly reset them.
 	 */
 	if (__is_processor(PV_POWER7) && ((0x80000000   val) <= 256))
 		return true;
 
 	return false;
 }
 
 /*
  * Performance monitor interrupt stuff
  */
 			if (is_limited_pmc(i   1))
 				continue;
 			val = read_pmc(i   1);
 			if (pmc_overflow(val))
 				write_pmc(i   1, 0);
 		}
 	}
