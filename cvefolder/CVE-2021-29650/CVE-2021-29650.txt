CVE Number : CVE-2021-29650
Commit Message : 
netfilter: x_tables: Use correct memory barriers.
Commit Details : 
When a new table value was assigned, it was followed by a write memory
barrier. This ensured that all writes before this point would complete
before any writes after this point. However, to determine whether the
rules are unused, the sequence counter is read. To ensure that all
writes have been done before these reads, a full memory barrier is
needed, not just a write memory barrier. The same argument applies when
incrementing the counter, before the rules are read.

Changing to using smp_mb() instead of smp_wmb() fixes the kernel panic
reported in cc00bcaa5899 (which is still present), while still
maintaining the same speed of replacing tables.

The smb_mb() barriers potentially slow the packet path, however testing
has shown no measurable change in performance on a 4-core MIPS64
platform.

Fixes: 7f5c6d4f665b ("netfilter: get rid of atomic ops in fast path")
Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

Before patch : 
 	 * since addend is most likely 1
 	 */
 	__this_cpu_add(xt_recseq.sequence, addend);
 	smp_wmb();
 
 	return addend;
 }
 	table >private = newinfo;
 
 	/* make sure all cpus see new  >private value */
 	smp_wmb();
 
 	/*
 	 * Even though table entries have now been swapped, other CPU's
After patch : 
 	 * since addend is most likely 1
 	 */
 	__this_cpu_add(xt_recseq.sequence, addend);
 	smp_mb();
 
 	return addend;
 }
 	table >private = newinfo;
 
 	/* make sure all cpus see new  >private value */
 	smp_mb();
 
 	/*
 	 * Even though table entries have now been swapped, other CPU's
