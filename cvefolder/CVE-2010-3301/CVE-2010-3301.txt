CVE Number : CVE-2010-3301
Commit Message : 
x86-64, compat: Retruncate rax after ia32 syscall entry tracing
Commit Details : 
In commit d4d6715, we reopened an old hole for a 64-bit ptracer touching a
32-bit tracee in system call entry.  A %rax value set via ptrace at the
entry tracing stop gets used whole as a 32-bit syscall number, while we
only check the low 32 bits for validity.

Fix it by truncating %rax back to 32 bits after syscall_trace_enter,
in addition to testing the full 64 bits as has already been added.

Reported-by: Ben Hawkes <hawkes@sota.gen.nz>
Signed-off-by: Roland McGrath <roland@redhat.com>
Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

Before patch : 
 	/*
 	 * Reload arg registers from stack in case ptrace changed them.
 	 * We don't reload %eax because syscall_trace_enter() returned
 	 * the value it wants us to use in the table lookup.
 	 */
 	.macro LOAD_ARGS32 offset, _r9=0
 	.if \_r9
 	movl \offset 48(%rsp),%edx
 	movl \offset 56(%rsp),%esi
 	movl \offset 64(%rsp),%edi
 	.endm
 
 	.macro CFI_STARTPROC32 simple
After patch : 
 	/*
 	 * Reload arg registers from stack in case ptrace changed them.
 	 * We don't reload %eax because syscall_trace_enter() returned
 	 * the %rax value we should see.  Instead, we just truncate that
 	 * value to 32 bits again as we did on entry from user mode.
 	 * If it's a new value set by user_regset during entry tracing,
 	 * this matches the normal truncation of the user mode value.
 	 * If it's  1 to make us punt the syscall, then (u32) 1 is still
 	 * an appropriately invalid value.
 	 */
 	.macro LOAD_ARGS32 offset, _r9=0
 	.if \_r9
 	movl \offset 48(%rsp),%edx
 	movl \offset 56(%rsp),%esi
 	movl \offset 64(%rsp),%edi
 	movl %eax,%eax			/* zero extension */
 	.endm
 
 	.macro CFI_STARTPROC32 simple
