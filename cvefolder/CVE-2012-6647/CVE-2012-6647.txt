CVE Number : CVE-2012-6647
Commit Message : 
futex: Forbid uaddr == uaddr2 in futex_wait_requeue_pi()
Commit Details : 
If uaddr == uaddr2, then we have broken the rule of only requeueing
from a non-pi futex to a pi futex with this call. If we attempt this,
as the trinity test suite manages to do, we miss early wakeups as
q.key is equal to key2 (because they are the same uaddr). We will then
attempt to dereference the pi_mutex (which would exist had the futex_q
been properly requeued to a pi futex) and trigger a NULL pointer
dereference.

Signed-off-by: Darren Hart <dvhart@linux.intel.com>
Cc: Dave Jones <davej@redhat.com>
Cc: stable@vger.kernel.org
Link: http://lkml.kernel.org/r/ad82bfe7f7d130247fbe2b5b4275654807774227.1342809673.git.dvhart@linux.intel.com
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>


Before patch : 
  * @uaddr2:	the pi futex we will take prior to returning to user space
  *
  * The caller will wait on uaddr and will be requeued by futex_requeue() to
  * uaddr2 which must be PI aware.  Normal wakeup will wake on uaddr2 and
  * complete the acquisition of the rt_mutex prior to returning to userspace.
  * This ensures the rt_mutex maintains an owner when it has waiters; without
  * one, the pi logic wouldn't know which task to boost/deboost, if there was a
  * need to.
  *
  * We call schedule in futex_wait_queue_me() when we enqueue and return there
  * via the following:
 	struct futex_q q = futex_q_init;
 	int res, ret;
 
 	if (!bitset)
 		return  EINVAL;
 
After patch : 
  * @uaddr2:	the pi futex we will take prior to returning to user space
  *
  * The caller will wait on uaddr and will be requeued by futex_requeue() to
  * uaddr2 which must be PI aware and unique from uaddr.  Normal wakeup will wake
  * on uaddr2 and complete the acquisition of the rt_mutex prior to returning to
  * userspace.  This ensures the rt_mutex maintains an owner when it has waiters;
  * without one, the pi logic would not know which task to boost/deboost, if
  * there was a need to.
  *
  * We call schedule in futex_wait_queue_me() when we enqueue and return there
  * via the following:
 	struct futex_q q = futex_q_init;
 	int res, ret;
 
 	if (uaddr == uaddr2)
 		return  EINVAL;
 
 	if (!bitset)
 		return  EINVAL;
 
