CVE Number : CVE-2019-15793
Commit Message : 
UBUNTU: SAUCE: shiftfs: Correct id translation for lower fs operations
Commit Details : 
BugLink: https://bugs.launchpad.net/bugs/1850867

Several locations which shift ids translate user/group ids before
performing operations in the lower filesystem are translating
them into init_user_ns, whereas they should be translated into
the s_user_ns for the lower filesystem. This will result in using
ids other than the intended ones in the lower fs, which will
likely not map into the shifts s_user_ns.

Change these sites to use shift_kugid() to do a translation
into the s_user_ns of the lower filesystem.

Reported-by: Jann Horn <jannh@google.com>
Signed-off-by: Seth Forshee <seth.forshee@canonical.com>

CVE-2019-15793

Acked-by: Tyler Hicks <tyhicks@canonical.com>
Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

Before patch : 
 	put_cred(newcred);
 }
 
 static int shiftfs_override_object_creds(const struct super_block *sb,
 					 const struct cred **oldcred,
 					 struct cred **newcred,
 					 struct dentry *dentry, umode_t mode,
 					 bool hardlink)
 {
 	kuid_t fsuid = current_fsuid();
 	kgid_t fsgid = current_fsgid();
 
 		return  ENOMEM;
 	}
 
 	(*newcred) >fsuid = KUIDT_INIT(from_kuid(sb >s_user_ns, fsuid));
 	(*newcred) >fsgid = KGIDT_INIT(from_kgid(sb >s_user_ns, fsgid));
 
 	if (!hardlink) {
 		int err = security_dentry_create_files_as(dentry, mode,
 	return 0;
 }
 
 static kuid_t shift_kuid(struct user_namespace *from, struct user_namespace *to,
 			 kuid_t kuid)
 {
 	uid_t uid = from_kuid(from, kuid);
 	return make_kuid(to, uid);
 }
 
 static kgid_t shift_kgid(struct user_namespace *from, struct user_namespace *to,
 			 kgid_t kgid)
 {
 	gid_t gid = from_kgid(from, kgid);
 	return make_kgid(to, gid);
 }
 
 static void shiftfs_copyattr(struct inode *from, struct inode *to)
 {
 	struct user_namespace *from_ns = from >i_sb >s_user_ns;
 	struct iattr newattr;
 	const struct cred *oldcred;
 	struct super_block *sb = dentry >d_sb;
 	int err;
 
 	err = setattr_prepare(dentry, attr);
 		return err;
 
 	newattr = *attr;
 	newattr.ia_uid = KUIDT_INIT(from_kuid(sb >s_user_ns, attr >ia_uid));
 	newattr.ia_gid = KGIDT_INIT(from_kgid(sb >s_user_ns, attr >ia_gid));
 
 	/*
 	 * mode change is for clearing setuid/setgid bits. Allow lower fs
 					const struct cred **oldcred,
 					struct cred **newcred)
 {
 	kuid_t fsuid = current_fsuid();
 	kgid_t fsgid = current_fsgid();
 
 		return  ENOMEM;
 	}
 
 	(*newcred) >fsuid = KUIDT_INIT(from_kuid(sb >s_user_ns, fsuid));
 	(*newcred) >fsgid = KGIDT_INIT(from_kgid(sb >s_user_ns, fsgid));
 
 	/* clear all caps to prevent bypassing capable() checks */
 	cap_clear((*newcred) >cap_bset);
After patch : 
 	put_cred(newcred);
 }
 
 static kuid_t shift_kuid(struct user_namespace *from, struct user_namespace *to,
 			 kuid_t kuid)
 {
 	uid_t uid = from_kuid(from, kuid);
 	return make_kuid(to, uid);
 }
 
 static kgid_t shift_kgid(struct user_namespace *from, struct user_namespace *to,
 			 kgid_t kgid)
 {
 	gid_t gid = from_kgid(from, kgid);
 	return make_kgid(to, gid);
 }
 
 static int shiftfs_override_object_creds(const struct super_block *sb,
 					 const struct cred **oldcred,
 					 struct cred **newcred,
 					 struct dentry *dentry, umode_t mode,
 					 bool hardlink)
 {
 	struct shiftfs_super_info *sbinfo = sb >s_fs_info;
 	kuid_t fsuid = current_fsuid();
 	kgid_t fsgid = current_fsgid();
 
 		return  ENOMEM;
 	}
 
 	(*newcred) >fsuid = shift_kuid(sb >s_user_ns, sbinfo >userns, fsuid);
 	(*newcred) >fsgid = shift_kgid(sb >s_user_ns, sbinfo >userns, fsgid);
 
 	if (!hardlink) {
 		int err = security_dentry_create_files_as(dentry, mode,
 	return 0;
 }
 
 static void shiftfs_copyattr(struct inode *from, struct inode *to)
 {
 	struct user_namespace *from_ns = from >i_sb >s_user_ns;
 	struct iattr newattr;
 	const struct cred *oldcred;
 	struct super_block *sb = dentry >d_sb;
 	struct shiftfs_super_info *sbinfo = sb >s_fs_info;
 	int err;
 
 	err = setattr_prepare(dentry, attr);
 		return err;
 
 	newattr = *attr;
 	newattr.ia_uid = shift_kuid(sb >s_user_ns, sbinfo >userns, attr >ia_uid);
 	newattr.ia_gid = shift_kgid(sb >s_user_ns, sbinfo >userns, attr >ia_gid);
 
 	/*
 	 * mode change is for clearing setuid/setgid bits. Allow lower fs
 					const struct cred **oldcred,
 					struct cred **newcred)
 {
 	struct shiftfs_super_info *sbinfo = sb >s_fs_info;
 	kuid_t fsuid = current_fsuid();
 	kgid_t fsgid = current_fsgid();
 
 		return  ENOMEM;
 	}
 
 	(*newcred) >fsuid = shift_kuid(sb >s_user_ns, sbinfo >userns, fsuid);
 	(*newcred) >fsgid = shift_kgid(sb >s_user_ns, sbinfo >userns, fsgid);
 
 	/* clear all caps to prevent bypassing capable() checks */
 	cap_clear((*newcred) >cap_bset);
