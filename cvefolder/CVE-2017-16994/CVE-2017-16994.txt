CVE Number : CVE-2017-16994
Commit Message : 
mm/pagewalk.c: report holes in hugetlb ranges
Commit Details : 
This matters at least for the mincore syscall, which will otherwise copy
uninitialized memory from the page allocator to userspace.  It is
probably also a correctness error for /proc/$pid/pagemap, but I haven't
tested that.

Removing the `walk->hugetlb_entry` condition in walk_hugetlb_range() has
no effect because the caller already checks for that.

This only reports holes in hugetlb ranges to callers who have specified
a hugetlb_entry callback.

This issue was found using an AFL-based fuzzer.

v2:
 - don't crash on ->pte_hole==NULL (Andrew Morton)
 - add Cc stable (Andrew Morton)

Fixes: 1e25a271c8ac ("mincore: apply page table walker on do_mincore()")
Signed-off-by: Jann Horn <jannh@google.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Before patch : 
 	do {
 		next = hugetlb_entry_end(h, addr, end);
 		pte = huge_pte_offset(walk >mm, addr & hmask, sz);
 		if (pte && walk >hugetlb_entry)
 			err = walk >hugetlb_entry(pte, hmask, addr, next, walk);
 		if (err)
 			break;
 	} while (addr = next, addr != end);
After patch : 
 	do {
 		next = hugetlb_entry_end(h, addr, end);
 		pte = huge_pte_offset(walk >mm, addr & hmask, sz);
 
 		if (pte)
 			err = walk >hugetlb_entry(pte, hmask, addr, next, walk);
 		else if (walk >pte_hole)
 			err = walk >pte_hole(addr, next, walk);
 
 		if (err)
 			break;
 	} while (addr = next, addr != end);
