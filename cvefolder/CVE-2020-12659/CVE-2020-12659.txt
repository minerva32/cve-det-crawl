CVE Number : CVE-2020-12659
Commit Message : 
xsk: Add missing check on user supplied headroom size
Commit Details : 
Add a check that the headroom cannot be larger than the available
space in the chunk. In the current code, a malicious user can set the
headroom to a value larger than the chunk size minus the fixed XDP
headroom. That way packets with a length larger than the supported
size in the umem could get accepted and result in an out-of-bounds
write.

Fixes: c0c77d8fb787 ("xsk: add user memory registration support sockopt")
Reported-by: Bui Quang Minh <minhquangbui99@gmail.com>
Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://bugzilla.kernel.org/show_bug.cgi?id=207225
Link: https://lore.kernel.org/bpf/1586849715-23490-1-git-send-email-magnus.karlsson@intel.com

Before patch : 
 	u32 chunk_size = mr >chunk_size, headroom = mr >headroom;
 	unsigned int chunks, chunks_per_page;
 	u64 addr = mr >addr, size = mr >len;
 	int size_chk, err;
 
 	if (chunk_size < XDP_UMEM_MIN_CHUNK_SIZE || chunk_size > PAGE_SIZE) {
 		/* Strictly speaking we could support this, if:
 			return  EINVAL;
 	}
 
 	size_chk = chunk_size   headroom   XDP_PACKET_HEADROOM;
 	if (size_chk < 0)
 		return  EINVAL;
 
 	umem >address = (unsigned long)addr;
After patch : 
 	u32 chunk_size = mr >chunk_size, headroom = mr >headroom;
 	unsigned int chunks, chunks_per_page;
 	u64 addr = mr >addr, size = mr >len;
 	int err;
 
 	if (chunk_size < XDP_UMEM_MIN_CHUNK_SIZE || chunk_size > PAGE_SIZE) {
 		/* Strictly speaking we could support this, if:
 			return  EINVAL;
 	}
 
 	if (headroom >= chunk_size   XDP_PACKET_HEADROOM)
 		return  EINVAL;
 
 	umem >address = (unsigned long)addr;
