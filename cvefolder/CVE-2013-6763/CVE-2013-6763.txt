CVE Number : CVE-2013-6763
Commit Message : 
Fix a few incorrectly checked io_remap_pfn_range() calls
Commit Details : 
Nico Golde reports a few straggling uses of io_remap_pfn_range() that
really should use the vm_iomap_memory() helper.  This trivially converts
two of them to the helper, and comments about why the third one really
needs to continue to use remap_pfn_range(), and adds the missing size
check.

Reported-by: Nico Golde <nico@ngolde.de>
Cc: stable@kernel.org
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org.

Before patch : 
 {
 	struct uio_device *idev = vma >vm_private_data;
 	int mi = uio_find_mem_index(vma);
 	if (mi < 0)
 		return  EINVAL;
 
 	vma >vm_ops = &uio_physical_vm_ops;
 
 	vma >vm_page_prot = pgprot_noncached(vma >vm_page_prot);
 
 	return remap_pfn_range(vma,
 			       vma >vm_start,
 			       idev >info >mem[mi].addr >> PAGE_SHIFT,
 			       vma >vm_end   vma >vm_start,
 			       vma >vm_page_prot);
 }
 int au1100fb_fb_mmap(struct fb_info *fbi, struct vm_area_struct *vma)
 {
 	struct au1100fb_device *fbdev;
 	unsigned int len;
 	unsigned long start=0, off;
 
 	fbdev = to_au1100fb_device(fbi);
 
 	if (vma >vm_pgoff > (~0UL >> PAGE_SHIFT)) {
 		return  EINVAL;
 	}
 
 	start = fbdev >fb_phys & PAGE_MASK;
 	len = PAGE_ALIGN((start & ~PAGE_MASK)   fbdev >fb_len);
 
 	off = vma >vm_pgoff << PAGE_SHIFT;
 
 	if ((vma >vm_end   vma >vm_start   off) > len) {
 		return  EINVAL;
 	}
 
 	off  = start;
 	vma >vm_pgoff = off >> PAGE_SHIFT;
 
 	vma >vm_page_prot = pgprot_noncached(vma >vm_page_prot);
 	pgprot_val(vma >vm_page_prot) |= (6 << 9); //CCA=6
 
 	if (io_remap_pfn_range(vma, vma >vm_start, off >> PAGE_SHIFT,
 				vma >vm_end   vma >vm_start,
 				vma >vm_page_prot)) {
 		return  EAGAIN;
 	}
 
 	return 0;
 }
 
 static struct fb_ops au1100fb_ops =
  * method mainly to allow the use of the TLB streaming flag (CCA=6)
  */
 static int au1200fb_fb_mmap(struct fb_info *info, struct vm_area_struct *vma)
 
 {
 	unsigned int len;
 	unsigned long start=0, off;
 	struct au1200fb_device *fbdev = info >par;
 
 	if (vma >vm_pgoff > (~0UL >> PAGE_SHIFT)) {
 		return  EINVAL;
 	}
 
 	start = fbdev >fb_phys & PAGE_MASK;
 	len = PAGE_ALIGN((start & ~PAGE_MASK)   fbdev >fb_len);
 
 	off = vma >vm_pgoff << PAGE_SHIFT;
 
 	if ((vma >vm_end   vma >vm_start   off) > len) {
 		return  EINVAL;
 	}
 
 	off  = start;
 	vma >vm_pgoff = off >> PAGE_SHIFT;
 
 	vma >vm_page_prot = pgprot_noncached(vma >vm_page_prot);
 	pgprot_val(vma >vm_page_prot) |= _CACHE_MASK; /* CCA=7 */
 
 	return io_remap_pfn_range(vma, vma >vm_start, off >> PAGE_SHIFT,
 				  vma >vm_end   vma >vm_start,
 				  vma >vm_page_prot);
 }
 
 static void set_global(u_int cmd, struct au1200_lcd_global_regs_t *pdata)
After patch : 
 {
 	struct uio_device *idev = vma >vm_private_data;
 	int mi = uio_find_mem_index(vma);
 	struct uio_mem *mem;
 	if (mi < 0)
 		return  EINVAL;
 	mem = idev >info >mem   mi;
 
 	if (vma >vm_end   vma >vm_start > mem >size)
 		return  EINVAL;
 
 	vma >vm_ops = &uio_physical_vm_ops;
 	vma >vm_page_prot = pgprot_noncached(vma >vm_page_prot);
 
 	/*
 	 * We cannot use the vm_iomap_memory() helper here,
 	 * because vma >vm_pgoff is the map index we looked
 	 * up above in uio_find_mem_index(), rather than an
 	 * actual page offset into the mmap.
 	 *
 	 * So we just do the physical mmap without a page
 	 * offset.
 	 */
 	return remap_pfn_range(vma,
 			       vma >vm_start,
 			       mem >addr >> PAGE_SHIFT,
 			       vma >vm_end   vma >vm_start,
 			       vma >vm_page_prot);
 }
 int au1100fb_fb_mmap(struct fb_info *fbi, struct vm_area_struct *vma)
 {
 	struct au1100fb_device *fbdev;
 
 	fbdev = to_au1100fb_device(fbi);
 
 	vma >vm_page_prot = pgprot_noncached(vma >vm_page_prot);
 	pgprot_val(vma >vm_page_prot) |= (6 << 9); //CCA=6
 
 	return vm_iomap_memory(vma, fbdev >fb_phys, fbdev >fb_len);
 }
 
 static struct fb_ops au1100fb_ops =
  * method mainly to allow the use of the TLB streaming flag (CCA=6)
  */
 static int au1200fb_fb_mmap(struct fb_info *info, struct vm_area_struct *vma)
 {
 	struct au1200fb_device *fbdev = info >par;
 
 	vma >vm_page_prot = pgprot_noncached(vma >vm_page_prot);
 	pgprot_val(vma >vm_page_prot) |= _CACHE_MASK; /* CCA=7 */
 
 	return vm_iomap_memory(vma, fbdev >fb_phys, fbdev >fb_len);
 }
 
 static void set_global(u_int cmd, struct au1200_lcd_global_regs_t *pdata)
