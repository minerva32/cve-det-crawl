CVE Number : CVE-2019-15212
Commit Message : 
USB: rio500: refuse more than one device at a time
Commit Details : 
This driver is using a global variable. It cannot handle more than
one device at a time. The issue has been existing since the dawn
of the driver.

Signed-off-by: Oliver Neukum <oneukum@suse.com>
Reported-by: syzbot+35f04d136fc975a70da4@syzkaller.appspotmail.com
Cc: stable <stable@vger.kernel.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Before patch : 
 {
 	struct usb_device *dev = interface_to_usbdev(intf);
 	struct rio_usb_data *rio = &rio_instance;
 	int retval;
 
 	dev_info(&intf >dev, "USB Rio found at address %d\n", dev >devnum);
 
 	retval = usb_register_dev(intf, &usb_rio_class);
 	if (retval) {
 		dev_err(&dev >dev,
 			"Not able to get a minor for this device.\n");
 		return  ENOMEM;
 	}
 
 	rio >rio_dev = dev;
 		dev_err(&dev >dev,
 			"probe_rio: Not enough memory for the output buffer\n");
 		usb_deregister_dev(intf, &usb_rio_class);
 		return  ENOMEM;
 	}
 	dev_dbg(&intf >dev, "obuf address:%p\n", rio >obuf);
 
 			"probe_rio: Not enough memory for the input buffer\n");
 		usb_deregister_dev(intf, &usb_rio_class);
 		kfree(rio >obuf);
 		return  ENOMEM;
 	}
 	dev_dbg(&intf >dev, "ibuf address:%p\n", rio >ibuf);
 
 
 	usb_set_intfdata (intf, rio);
 	rio >present = 1;
 
 	return 0;
 }
 
 static void disconnect_rio(struct usb_interface *intf)
After patch : 
 {
 	struct usb_device *dev = interface_to_usbdev(intf);
 	struct rio_usb_data *rio = &rio_instance;
 	int retval = 0;
 
 	mutex_lock(&rio500_mutex);
 	if (rio >present) {
 		dev_info(&intf >dev, "Second USB Rio at address %d refused\n", dev >devnum);
 		retval =  EBUSY;
 		goto bail_out;
 	} else {
 		dev_info(&intf >dev, "USB Rio found at address %d\n", dev >devnum);
 	}
 
 	retval = usb_register_dev(intf, &usb_rio_class);
 	if (retval) {
 		dev_err(&dev >dev,
 			"Not able to get a minor for this device.\n");
 		retval =  ENOMEM;
 		goto bail_out;
 	}
 
 	rio >rio_dev = dev;
 		dev_err(&dev >dev,
 			"probe_rio: Not enough memory for the output buffer\n");
 		usb_deregister_dev(intf, &usb_rio_class);
 		retval =  ENOMEM;
 		goto bail_out;
 	}
 	dev_dbg(&intf >dev, "obuf address:%p\n", rio >obuf);
 
 			"probe_rio: Not enough memory for the input buffer\n");
 		usb_deregister_dev(intf, &usb_rio_class);
 		kfree(rio >obuf);
 		retval =  ENOMEM;
 		goto bail_out;
 	}
 	dev_dbg(&intf >dev, "ibuf address:%p\n", rio >ibuf);
 
 
 	usb_set_intfdata (intf, rio);
 	rio >present = 1;
 bail_out:
 	mutex_unlock(&rio500_mutex);
 
 	return retval;
 }
 
 static void disconnect_rio(struct usb_interface *intf)
