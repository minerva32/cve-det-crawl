CVE Number : CVE-2018-17182
Commit Message : 
mm: get rid of vmacache_flush_all() entirely
Commit Details : 
Jann Horn points out that the vmacache_flush_all() function is not only
potentially expensive, it's buggy too.  It also happens to be entirely
unnecessary, because the sequence number overflow case can be avoided by
simply making the sequence number be 64-bit.  That doesn't even grow the
data structures in question, because the other adjacent fields are
already 64-bit.

So simplify the whole thing by just making the sequence number overflow
case go away entirely, which gets rid of all the complications and makes
the code faster too.  Win-win.

 Oleg Nesterov points out that the VMACACHE_FULL_FLUSHES statistics
  also just goes away entirely with this 

Reported-by: Jann Horn <jannh@google.com>
Suggested-by: Will Deacon <will.deacon@arm.com>
Acked-by: Davidlohr Bueso <dave@stgolabs.net>
Cc: Oleg Nesterov <oleg@redhat.com>
Cc: stable@kernel.org
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Before patch : 
 	struct {
 		struct vm_area_struct *mmap;		/* list of VMAs */
 		struct rb_root mm_rb;
 		u32 vmacache_seqnum;                   /* per thread vmacache */
 #ifdef CONFIG_MMU
 		unsigned long (*get_unmapped_area) (struct file *filp,
 				unsigned long addr, unsigned long len,
 #define VMACACHE_MASK (VMACACHE_SIZE   1)
 
 struct vmacache {
 	u32 seqnum;
 	struct vm_area_struct *vmas[VMACACHE_SIZE];
 };
 
 #ifdef CONFIG_DEBUG_VM_VMACACHE
 		VMACACHE_FIND_CALLS,
 		VMACACHE_FIND_HITS,
 		VMACACHE_FULL_FLUSHES,
 #endif
 #ifdef CONFIG_SWAP
 		SWAP_RA,
 	memset(tsk >vmacache.vmas, 0, sizeof(tsk >vmacache.vmas));
 }
 
 extern void vmacache_flush_all(struct mm_struct *mm);
 extern void vmacache_update(unsigned long addr, struct vm_area_struct *newvma);
 extern struct vm_area_struct *vmacache_find(struct mm_struct *mm,
 						    unsigned long addr);
 static inline void vmacache_invalidate(struct mm_struct *mm)
 {
 	mm >vmacache_seqnum  ;
 
 	/* deal with overflows */
 	if (unlikely(mm >vmacache_seqnum == 0))
 		vmacache_flush_all(mm);
 }
 
 #endif /* __LINUX_VMACACHE_H */
 
 void dump_mm(const struct mm_struct *mm)
 {
 	pr_emerg("mm %px mmap %px seqnum %d task_size %lu\n"
 #ifdef CONFIG_MMU
 		"get_unmapped_area %px\n"
 #endif
 		"tlb_flush_pending %d\n"
 		"def_flags: %#lx(%pGv)\n",
 
 		mm, mm >mmap, mm >vmacache_seqnum, mm >task_size,
 #ifdef CONFIG_MMU
 		mm >get_unmapped_area,
 #endif
 #define VMACACHE_HASH(addr) ((addr >> VMACACHE_SHIFT) & VMACACHE_MASK)
 
 /*
  * Flush vma caches for threads that share a given mm.
  *
  * The operation is safe because the caller holds the mmap_sem
  * exclusively and other threads accessing the vma cache will
  * have mmap_sem held at least for read, so no extra locking
  * is required to maintain the vma cache.
  */
 void vmacache_flush_all(struct mm_struct *mm)
 {
 	struct task_struct *g, *p;
 
 	count_vm_vmacache_event(VMACACHE_FULL_FLUSHES);
 
 	/*
 	 * Single threaded tasks need not iterate the entire
 	 * list of process. We can avoid the flushing as well
 	 * since the mm's seqnum was increased and don't have
 	 * to worry about other threads' seqnum. Current's
 	 * flush will occur upon the next lookup.
 	 */
 	if (atomic_read(&mm >mm_users) == 1)
 		return;
 
 	rcu_read_lock();
 	for_each_process_thread(g, p) {
 		/*
 		 * Only flush the vmacache pointers as the
 		 * mm seqnum is already set and curr's will
 		 * be set upon invalidation when the next
 		 * lookup is done.
 		 */
 		if (mm == p >mm)
 			vmacache_flush(p);
 	}
 	rcu_read_unlock();
 }
 
 /*
  * This task may be accessing a foreign mm via (for example)
  * get_user_pages() >find_vma().  The vmacache is task local and this
  * task's vmacache pertains to a different mm (ie, its own).  There is
After patch : 
 	struct {
 		struct vm_area_struct *mmap;		/* list of VMAs */
 		struct rb_root mm_rb;
 		u64 vmacache_seqnum;                   /* per thread vmacache */
 #ifdef CONFIG_MMU
 		unsigned long (*get_unmapped_area) (struct file *filp,
 				unsigned long addr, unsigned long len,
 #define VMACACHE_MASK (VMACACHE_SIZE   1)
 
 struct vmacache {
 	u64 seqnum;
 	struct vm_area_struct *vmas[VMACACHE_SIZE];
 };
 
 #ifdef CONFIG_DEBUG_VM_VMACACHE
 		VMACACHE_FIND_CALLS,
 		VMACACHE_FIND_HITS,
 #endif
 #ifdef CONFIG_SWAP
 		SWAP_RA,
 	memset(tsk >vmacache.vmas, 0, sizeof(tsk >vmacache.vmas));
 }
 
 extern void vmacache_update(unsigned long addr, struct vm_area_struct *newvma);
 extern struct vm_area_struct *vmacache_find(struct mm_struct *mm,
 						    unsigned long addr);
 static inline void vmacache_invalidate(struct mm_struct *mm)
 {
 	mm >vmacache_seqnum  ;
 }
 
 #endif /* __LINUX_VMACACHE_H */
 
 void dump_mm(const struct mm_struct *mm)
 {
 	pr_emerg("mm %px mmap %px seqnum %llu task_size %lu\n"
 #ifdef CONFIG_MMU
 		"get_unmapped_area %px\n"
 #endif
 		"tlb_flush_pending %d\n"
 		"def_flags: %#lx(%pGv)\n",
 
 		mm, mm >mmap, (long long) mm >vmacache_seqnum, mm >task_size,
 #ifdef CONFIG_MMU
 		mm >get_unmapped_area,
 #endif
 #define VMACACHE_HASH(addr) ((addr >> VMACACHE_SHIFT) & VMACACHE_MASK)
 
 /*
  * This task may be accessing a foreign mm via (for example)
  * get_user_pages() >find_vma().  The vmacache is task local and this
  * task's vmacache pertains to a different mm (ie, its own).  There is
