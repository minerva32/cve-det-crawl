CVE Number : CVE-2015-1465
Commit Message : 
ipv4: try to cache dst_entries which would cause a redirect
Commit Details : 
Not caching dst_entries which cause redirects could be exploited by hosts
on the same subnet, causing a severe DoS attack. This effect aggravated
since commit f88649721268999 ("ipv4: fix dst race in sk_dst_get()").

Lookups causing redirects will be allocated with DST_NOCACHE set which
will force dst_release to free them via RCU.  Unfortunately waiting for
RCU grace period just takes too long, we can end up with >1M dst_entries
waiting to be released and the system will run OOM. rcuos threads cannot
catch up under high softirq load.

Attaching the flag to emit a redirect later on to the specific skb allows
us to cache those dst_entries thus reducing the pressure on allocation
and deallocation.

This issue was discovered by Marcelo Leitner.

Cc: Julian Anastasov <ja@ssi.bg>
Signed-off-by: Marcelo Leitner <mleitner@redhat.com>
Signed-off-by: Florian Westphal <fw@strlen.de>
Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
Signed-off-by: Julian Anastasov <ja@ssi.bg>
Signed-off-by: David S. Miller <davem@davemloft.net>

Before patch : 
 	struct ip_options	opt;		/* Compiled IP options		*/
 	unsigned char		flags;
 
 #define IPSKB_FORWARDED		1
 #define IPSKB_XFRM_TUNNEL_SIZE	2
 #define IPSKB_XFRM_TRANSFORMED	4
 #define IPSKB_FRAG_COMPLETE	8
 #define IPSKB_REROUTED		16
 
 	u16			frag_max_size;
 };
 	 *	We now generate an ICMP HOST REDIRECT giving the route
 	 *	we calculated.
 	 */
 	if (rt >rt_flags&RTCF_DOREDIRECT && !opt >srr && !skb_sec_path(skb))
 		ip_rt_send_redirect(skb);
 
 	skb >priority = rt_tos2priority(iph >tos);
 
 	do_cache = res >fi && !itag;
 	if (out_dev == in_dev && err && IN_DEV_TX_REDIRECTS(out_dev) &&
 	    (IN_DEV_SHARED_MEDIA(out_dev) ||
 	     inet_addr_onlink(out_dev, saddr, FIB_RES_GW(*res)))) {
 		flags |= RTCF_DOREDIRECT;
 		do_cache = false;
 	}
 
 	if (skb >protocol != htons(ETH_P_IP)) {
 		/* Not IP (i.e. ARP). Do not create route, if it is
 	r >rtm_flags	= (rt >rt_flags & ~0xFFFF) | RTM_F_CLONED;
 	if (rt >rt_flags & RTCF_NOTIFY)
 		r >rtm_flags |= RTM_F_NOTIFY;
 
 	if (nla_put_be32(skb, RTA_DST, dst))
 		goto nla_put_failure;
After patch : 
 	struct ip_options	opt;		/* Compiled IP options		*/
 	unsigned char		flags;
 
 #define IPSKB_FORWARDED		BIT(0)
 #define IPSKB_XFRM_TUNNEL_SIZE	BIT(1)
 #define IPSKB_XFRM_TRANSFORMED	BIT(2)
 #define IPSKB_FRAG_COMPLETE	BIT(3)
 #define IPSKB_REROUTED		BIT(4)
 #define IPSKB_DOREDIRECT	BIT(5)
 
 	u16			frag_max_size;
 };
 	 *	We now generate an ICMP HOST REDIRECT giving the route
 	 *	we calculated.
 	 */
 	if (IPCB(skb) >flags & IPSKB_DOREDIRECT && !opt >srr &&
 	    !skb_sec_path(skb))
 		ip_rt_send_redirect(skb);
 
 	skb >priority = rt_tos2priority(iph >tos);
 
 	do_cache = res >fi && !itag;
 	if (out_dev == in_dev && err && IN_DEV_TX_REDIRECTS(out_dev) &&
 	    skb >protocol == htons(ETH_P_IP) &&
 	    (IN_DEV_SHARED_MEDIA(out_dev) ||
 	     inet_addr_onlink(out_dev, saddr, FIB_RES_GW(*res))))
 		IPCB(skb) >flags |= IPSKB_DOREDIRECT;
 
 	if (skb >protocol != htons(ETH_P_IP)) {
 		/* Not IP (i.e. ARP). Do not create route, if it is
 	r >rtm_flags	= (rt >rt_flags & ~0xFFFF) | RTM_F_CLONED;
 	if (rt >rt_flags & RTCF_NOTIFY)
 		r >rtm_flags |= RTM_F_NOTIFY;
 	if (IPCB(skb) >flags & IPSKB_DOREDIRECT)
 		r >rtm_flags |= RTCF_DOREDIRECT;
 
 	if (nla_put_be32(skb, RTA_DST, dst))
 		goto nla_put_failure;
