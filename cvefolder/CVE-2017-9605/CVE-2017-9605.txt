CVE Number : CVE-2017-9605
Commit Message : 
drm/vmwgfx: Make sure backup_handle is always valid
Commit Details : 
When vmw_gb_surface_define_ioctl() is called with an existing buffer,
we end up returning an uninitialized variable in the backup_handle.

The fix is to first initialize backup_handle to 0 just to be sure, and
second, when a user-provided buffer is found, we will use the
req->buffer_handle as the backup_handle.

Cc: <stable@vger.kernel.org>
Reported-by: Murray McAllister <murray.mcallister@insomniasec.com>
Signed-off-by: Sinclair Yeh <syeh@vmware.com>
Reviewed-by: Deepak Rawat <drawat@vmware.com>

Before patch : 
 	struct ttm_object_file *tfile = vmw_fpriv(file_priv) >tfile;
 	int ret;
 	uint32_t size;
 	uint32_t backup_handle;
 
 	if (req >multisample_count != 0)
 		return  EINVAL;
 		ret = vmw_user_dmabuf_lookup(tfile, req >buffer_handle,
 					     &res >backup,
 					     &user_srf >backup_base);
 		if (ret == 0 && res >backup >base.num_pages * PAGE_SIZE <
 		    res >backup_size) {
 			DRM_ERROR("Surface backup buffer is too small.\n");
 			vmw_dmabuf_unreference(&res >backup);
 			ret =  EINVAL;
 			goto out_unlock;
 		}
 	} else if (req >drm_surface_flags & drm_vmw_surface_flag_create_buffer)
 		ret = vmw_user_dmabuf_alloc(dev_priv, tfile,
After patch : 
 	struct ttm_object_file *tfile = vmw_fpriv(file_priv) >tfile;
 	int ret;
 	uint32_t size;
 	uint32_t backup_handle = 0;
 
 	if (req >multisample_count != 0)
 		return  EINVAL;
 		ret = vmw_user_dmabuf_lookup(tfile, req >buffer_handle,
 					     &res >backup,
 					     &user_srf >backup_base);
 		if (ret == 0) {
 			if (res >backup >base.num_pages * PAGE_SIZE <
 			    res >backup_size) {
 				DRM_ERROR("Surface backup buffer is too small.\n");
 				vmw_dmabuf_unreference(&res >backup);
 				ret =  EINVAL;
 				goto out_unlock;
 			} else {
 				backup_handle = req >buffer_handle;
 			}
 		}
 	} else if (req >drm_surface_flags & drm_vmw_surface_flag_create_buffer)
 		ret = vmw_user_dmabuf_alloc(dev_priv, tfile,
