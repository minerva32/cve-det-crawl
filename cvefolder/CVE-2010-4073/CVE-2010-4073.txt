CVE Number : CVE-2010-4073
Commit Message : 
ipc: initialize structure memory to zero for compat functions
Commit Details : 
This takes care of leaking uninitialized kernel stack memory to
userspace from non-zeroed fields in structs in compat ipc functions.

Signed-off-by: Dan Rosenberg <drosenberg@vsecurity.com>
Cc: Manfred Spraul <manfred@colorfullife.com>
Cc: Arnd Bergmann <arnd@arndb.de>
Cc: <stable@kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Before patch : 
 	struct semid64_ds __user *up64;
 	int version = compat_ipc_parse_version(&third);
 
 	if (!uptr)
 		return  EINVAL;
 	if (get_user(pad, (u32 __user *) uptr))
 	int version = compat_ipc_parse_version(&second);
 	void __user *p;
 
 	switch (second & (~IPC_64)) {
 	case IPC_INFO:
 	case IPC_RMID:
 	int err, err2;
 	int version = compat_ipc_parse_version(&second);
 
 	switch (second & (~IPC_64)) {
 	case IPC_RMID:
 	case SHM_LOCK:
 	void __user *p = NULL;
 	if (u_attr && oflag & O_CREAT) {
 		struct mq_attr attr;
 		p = compat_alloc_user_space(sizeof(attr));
 		if (get_compat_mq_attr(&attr, u_attr) ||
 		    copy_to_user(p, &attr, sizeof(attr)))
 	struct mq_attr __user *p = compat_alloc_user_space(2 * sizeof(*p));
 	long ret;
 
 	if (u_mqstat) {
 		if (get_compat_mq_attr(&mqstat, u_mqstat) ||
 		    copy_to_user(p, &mqstat, sizeof(mqstat)))
After patch : 
 	struct semid64_ds __user *up64;
 	int version = compat_ipc_parse_version(&third);
 
 	memset(&s64, 0, sizeof(s64));
 
 	if (!uptr)
 		return  EINVAL;
 	if (get_user(pad, (u32 __user *) uptr))
 	int version = compat_ipc_parse_version(&second);
 	void __user *p;
 
 	memset(&m64, 0, sizeof(m64));
 
 	switch (second & (~IPC_64)) {
 	case IPC_INFO:
 	case IPC_RMID:
 	int err, err2;
 	int version = compat_ipc_parse_version(&second);
 
 	memset(&s64, 0, sizeof(s64));
 
 	switch (second & (~IPC_64)) {
 	case IPC_RMID:
 	case SHM_LOCK:
 	void __user *p = NULL;
 	if (u_attr && oflag & O_CREAT) {
 		struct mq_attr attr;
 
 		memset(&attr, 0, sizeof(attr));
 
 		p = compat_alloc_user_space(sizeof(attr));
 		if (get_compat_mq_attr(&attr, u_attr) ||
 		    copy_to_user(p, &attr, sizeof(attr)))
 	struct mq_attr __user *p = compat_alloc_user_space(2 * sizeof(*p));
 	long ret;
 
 	memset(&mqstat, 0, sizeof(mqstat));
 
 	if (u_mqstat) {
 		if (get_compat_mq_attr(&mqstat, u_mqstat) ||
 		    copy_to_user(p, &mqstat, sizeof(mqstat)))
