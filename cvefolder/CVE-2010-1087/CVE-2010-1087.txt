CVE Number : CVE-2010-1087
Commit Message : 
NFS: Fix an Oops when truncating a file
Commit Details : 
The VM/VFS does not allow mapping->a_ops->invalidatepage() to fail.
Unfortunately, nfs_wb_page_cancel() may fail if a fatal signal occurs.
Since the NFS code assumes that the page stays mapped for as long as the
writeback is active, we can end up Oopsing (among other things).

The only safe fix here is to convert nfs_wait_on_request(), so as to make
it uninterruptible (as is already the case with wait_on_page_writeback()).


Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
Cc: stable@kernel.org

Before patch : 
 	kref_put(&req >wb_kref, nfs_free_request);
 }
 
 /**
  * nfs_wait_on_request   Wait for a request to complete.
  * @req: request to wait upon.
 int
 nfs_wait_on_request(struct nfs_page *req)
 {
 	int ret = 0;
 
 	if (!test_bit(PG_BUSY, &req >wb_flags))
 		goto out;
 	ret = out_of_line_wait_on_bit(&req >wb_flags, PG_BUSY,
 			nfs_wait_bit_killable, TASK_KILLABLE);
 out:
 	return ret;
 }
 
 /**
After patch : 
 	kref_put(&req >wb_kref, nfs_free_request);
 }
 
 static int nfs_wait_bit_uninterruptible(void *word)
 {
 	io_schedule();
 	return 0;
 }
 
 /**
  * nfs_wait_on_request   Wait for a request to complete.
  * @req: request to wait upon.
 int
 nfs_wait_on_request(struct nfs_page *req)
 {
 	return wait_on_bit(&req >wb_flags, PG_BUSY,
 			nfs_wait_bit_uninterruptible,
 			TASK_UNINTERRUPTIBLE);
 }
 
 /**
