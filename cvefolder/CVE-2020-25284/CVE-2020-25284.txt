CVE Number : CVE-2020-25284
Commit Message : 
rbd: require global CAP_SYS_ADMIN for mapping and unmapping
Commit Details : 
It turns out that currently we rely only on sysfs attribute
permissions:

  $ ll /sys/bus/rbd/{add*,remove*}
  --w------- 1 root root 4096 Sep  3 20:37 /sys/bus/rbd/add
  --w------- 1 root root 4096 Sep  3 20:37 /sys/bus/rbd/add_single_major
  --w------- 1 root root 4096 Sep  3 20:37 /sys/bus/rbd/remove
  --w------- 1 root root 4096 Sep  3 20:38 /sys/bus/rbd/remove_single_major

This means that images can be mapped and unmapped (i.e. block devices
can be created and deleted) by a UID 0 process even after it drops all
privileges or by any process with CAP_DAC_OVERRIDE in its user namespace
as long as UID 0 is mapped into that user namespace.

Be consistent with other virtual block devices (loop, nbd, dm, md, etc)
and require CAP_SYS_ADMIN in the initial user namespace for mapping and
unmapping, and also for dumping the configuration string and refreshing
the image header.

Cc: stable@vger.kernel.org
Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
Reviewed-by: Jeff Layton <jlayton@kernel.org>

Before patch : 
 {
 	struct rbd_device *rbd_dev = dev_to_rbd_dev(dev);
 
 	return sprintf(buf, "%s\n", rbd_dev >config_info);
 }
 
 	struct rbd_device *rbd_dev = dev_to_rbd_dev(dev);
 	int ret;
 
 	ret = rbd_dev_refresh(rbd_dev);
 	if (ret)
 		return ret;
 	struct rbd_client *rbdc;
 	int rc;
 
 	if (!try_module_get(THIS_MODULE))
 		return  ENODEV;
 
 	bool force = false;
 	int ret;
 
 	dev_id =  1;
 	opt_buf[0] = '\0';
 	sscanf(buf, "%d %5s", &dev_id, opt_buf);
After patch : 
 {
 	struct rbd_device *rbd_dev = dev_to_rbd_dev(dev);
 
 	if (!capable(CAP_SYS_ADMIN))
 		return  EPERM;
 
 	return sprintf(buf, "%s\n", rbd_dev >config_info);
 }
 
 	struct rbd_device *rbd_dev = dev_to_rbd_dev(dev);
 	int ret;
 
 	if (!capable(CAP_SYS_ADMIN))
 		return  EPERM;
 
 	ret = rbd_dev_refresh(rbd_dev);
 	if (ret)
 		return ret;
 	struct rbd_client *rbdc;
 	int rc;
 
 	if (!capable(CAP_SYS_ADMIN))
 		return  EPERM;
 
 	if (!try_module_get(THIS_MODULE))
 		return  ENODEV;
 
 	bool force = false;
 	int ret;
 
 	if (!capable(CAP_SYS_ADMIN))
 		return  EPERM;
 
 	dev_id =  1;
 	opt_buf[0] = '\0';
 	sscanf(buf, "%d %5s", &dev_id, opt_buf);
